// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220513130927_FirstSeed")]
    partial class FirstSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.CarCategoryEntity.CarCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CarCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "B"
                        },
                        new
                        {
                            Id = 3,
                            Name = "C"
                        },
                        new
                        {
                            Id = 4,
                            Name = "D"
                        });
                });

            modelBuilder.Entity("Core.Entities.CarEntity.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<float>("LoadCapacity")
                        .HasColumnType("real");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TechnicalPassport")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vin")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 3,
                            Color = "Жовтий",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 1, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 879.86194f,
                            Model = "I 641 B",
                            RegistrationNumber = "UJIPU4P418CK1YSCLE8J",
                            TechnicalPassport = "LVX8RR8A8WT4XGE51BH8",
                            UserId = "297cac55-efe3-4924-a55f-0b1c16196292",
                            Vin = "ABVEE2SKHZ31GYM9Y"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 4,
                            Color = "Червоний",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 1, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 529.5811f,
                            Model = "X 223 K",
                            RegistrationNumber = "7MLJMA9XZRPLMDDD5HNF",
                            TechnicalPassport = "U1WZGJRDEDDZ5WORSJ5A",
                            UserId = "ed986759-5ed1-404b-80d1-aa4d7fa16a1b",
                            Vin = "3ARC0WKPQX8PK5QL3"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Color = "Зелений",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 4, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 459.2684f,
                            Model = "N 658 J",
                            RegistrationNumber = "QFPPMKMCD7RYL83JVTPN",
                            TechnicalPassport = "GQFCI07F1RCKHX0XA7Y4",
                            UserId = "2dacf970-cca4-4fbf-8685-a3c75238c32a",
                            Vin = "UIS65DZKN2TZWZZD6"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            Color = "Чорний",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 2, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 403.9624f,
                            Model = "H 645 W",
                            RegistrationNumber = "7HO868NUKJVVXJBUTGH4",
                            TechnicalPassport = "9QI00XX1CRWA9MLPH5SB",
                            UserId = "ed986759-5ed1-404b-80d1-aa4d7fa16a1b",
                            Vin = "9F132UUQJQSHLGZN7"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            Color = "Червоний",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 5, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 917.9577f,
                            Model = "M 820 Q",
                            RegistrationNumber = "KMAXLDON641H2YWV36M7",
                            TechnicalPassport = "6IR15QTXJ0EQGTGHRW8D",
                            UserId = "297cac55-efe3-4924-a55f-0b1c16196292",
                            Vin = "MDJYWOAE8FVLF2V9S"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Color = "Сірий",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 5, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 434.1489f,
                            Model = "D 247 S",
                            RegistrationNumber = "B19HF46Y8C4VEH6U5M5R",
                            TechnicalPassport = "ZVVDEMH4DU4XGN8WN6VA",
                            UserId = "297cac55-efe3-4924-a55f-0b1c16196292",
                            Vin = "M8B7HRL0E4ZEQF6V3"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Color = "Білий",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 3, 13, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 669.0207f,
                            Model = "O 458 G",
                            RegistrationNumber = "6EQ896YRVPI8M274QICG",
                            TechnicalPassport = "ZY2XSQR31N0W804SRJBU",
                            UserId = "297cac55-efe3-4924-a55f-0b1c16196292",
                            Vin = "4O87JTWOVJ7Y88CSF"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Color = "Білий",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 5, 13, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 812.6773f,
                            Model = "S 281 S",
                            RegistrationNumber = "L0MYFD77IZMUDPL6Y7DS",
                            TechnicalPassport = "GPARVFY3SFLMWYM7XVHA",
                            UserId = "297cac55-efe3-4924-a55f-0b1c16196292",
                            Vin = "OYLEY3UCHNCF8WPV2"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Color = "Жовтий",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 5, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 639.16455f,
                            Model = "K 186 K",
                            RegistrationNumber = "0XF2E92Q2350B5GHV9FY",
                            TechnicalPassport = "YAHQQH1SHVLWLKLHJ0F3",
                            UserId = "297cac55-efe3-4924-a55f-0b1c16196292",
                            Vin = "AB3WEQLHKUZ5FPFOC"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Color = "Червоний",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 5, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 827.7566f,
                            Model = "G 273 N",
                            RegistrationNumber = "8ERJZYUTCJ1Z5MT3B60A",
                            TechnicalPassport = "QXG4V1UNJV3O3TVHM6MJ",
                            UserId = "297cac55-efe3-4924-a55f-0b1c16196292",
                            Vin = "MLDQ92JTV48WRAYNN"
                        });
                });

            modelBuilder.Entity("Core.Entities.GoodCategoryEntity.GoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("GoodCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "FOOD"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DRINKS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CLOTHING"
                        },
                        new
                        {
                            Id = 4,
                            Name = "FOOTWEAR"
                        },
                        new
                        {
                            Id = 5,
                            Name = "HYGIENE PRODUCTS"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CAMOUFLAGE"
                        },
                        new
                        {
                            Id = 7,
                            Name = "MEDICINES"
                        });
                });

            modelBuilder.Entity("Core.Entities.OfferEntity.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatorRoleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("GoodCategoryId")
                        .HasColumnType("int");

                    b.Property<float>("GoodsWeight")
                        .HasColumnType("real");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<string>("OfferCreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OfferPointId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedTripId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CreatorRoleId");

                    b.HasIndex("GoodCategoryId");

                    b.HasIndex("OfferCreatorId");

                    b.HasIndex("OfferPointId");

                    b.HasIndex("RelatedTripId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 7, 21, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 6,
                            GoodsWeight = 954.1763f,
                            IsClosed = false,
                            OfferCreatorId = "f5e5ba53-e2fc-4d07-be91-8f488219da70",
                            OfferPointId = 1,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 5, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 7, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 6,
                            GoodsWeight = 341.95535f,
                            IsClosed = false,
                            OfferCreatorId = "ed986759-5ed1-404b-80d1-aa4d7fa16a1b",
                            OfferPointId = 2,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 7, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 3,
                            GoodsWeight = 586.28033f,
                            IsClosed = false,
                            OfferCreatorId = "cd6ceeaf-fe6e-4bd1-9a1c-62fb18bbaa23",
                            OfferPointId = 3,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 3, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 8, 22, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 1,
                            GoodsWeight = 920.66144f,
                            IsClosed = false,
                            OfferCreatorId = "3870b76e-d01d-49a2-97b6-618862ed378b",
                            OfferPointId = 4,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 3, 6, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 6, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 2,
                            GoodsWeight = 309.12473f,
                            IsClosed = false,
                            OfferCreatorId = "c586b47a-e79f-425c-a148-fdf6808b2d3b",
                            OfferPointId = 5,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 4, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 10, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 4,
                            GoodsWeight = 207.33945f,
                            IsClosed = false,
                            OfferCreatorId = "24ae36dc-45b7-4efb-9c7e-2641a813703e",
                            OfferPointId = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 5, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 8, 23, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 7,
                            GoodsWeight = 419.93698f,
                            IsClosed = false,
                            OfferCreatorId = "24ae36dc-45b7-4efb-9c7e-2641a813703e",
                            OfferPointId = 7,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 7, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 6, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 3,
                            GoodsWeight = 646.76105f,
                            IsClosed = false,
                            OfferCreatorId = "c586b47a-e79f-425c-a148-fdf6808b2d3b",
                            OfferPointId = 8,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 3, 7, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 7, 20, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 1,
                            GoodsWeight = 739.81213f,
                            IsClosed = false,
                            OfferCreatorId = "24ae36dc-45b7-4efb-9c7e-2641a813703e",
                            OfferPointId = 9,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 3, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 10, 13, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 1,
                            GoodsWeight = 297.48154f,
                            IsClosed = false,
                            OfferCreatorId = "24ae36dc-45b7-4efb-9c7e-2641a813703e",
                            OfferPointId = 10,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 5, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 11,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 9, 13, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 7,
                            GoodsWeight = 251.33359f,
                            IsClosed = false,
                            OfferCreatorId = "2dacf970-cca4-4fbf-8685-a3c75238c32a",
                            OfferPointId = 11,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 12,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 5, 23, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 4,
                            GoodsWeight = 652.4579f,
                            IsClosed = false,
                            OfferCreatorId = "ed986759-5ed1-404b-80d1-aa4d7fa16a1b",
                            OfferPointId = 12,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 4, 5, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 13,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 6, 23, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 4,
                            GoodsWeight = 93.54962f,
                            IsClosed = false,
                            OfferCreatorId = "f5e5ba53-e2fc-4d07-be91-8f488219da70",
                            OfferPointId = 13,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 14,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 6, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 7,
                            GoodsWeight = 787.49286f,
                            IsClosed = false,
                            OfferCreatorId = "ed986759-5ed1-404b-80d1-aa4d7fa16a1b",
                            OfferPointId = 14,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 15,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 5, 19, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 2,
                            GoodsWeight = 632.0474f,
                            IsClosed = false,
                            OfferCreatorId = "3870b76e-d01d-49a2-97b6-618862ed378b",
                            OfferPointId = 15,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 4, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 16,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 6, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 7,
                            GoodsWeight = 482.11383f,
                            IsClosed = false,
                            OfferCreatorId = "c586b47a-e79f-425c-a148-fdf6808b2d3b",
                            OfferPointId = 16,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 3, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 17,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 7, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 4,
                            GoodsWeight = 148.89653f,
                            IsClosed = false,
                            OfferCreatorId = "cd6ceeaf-fe6e-4bd1-9a1c-62fb18bbaa23",
                            OfferPointId = 17,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 6, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 18,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 5, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 3,
                            GoodsWeight = 247.17726f,
                            IsClosed = false,
                            OfferCreatorId = "cd6ceeaf-fe6e-4bd1-9a1c-62fb18bbaa23",
                            OfferPointId = 18,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 4, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 19,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 8, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 7,
                            GoodsWeight = 498.71878f,
                            IsClosed = false,
                            OfferCreatorId = "ed986759-5ed1-404b-80d1-aa4d7fa16a1b",
                            OfferPointId = 19,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 7, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 20,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 10, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 3,
                            GoodsWeight = 455.82202f,
                            IsClosed = false,
                            OfferCreatorId = "2dacf970-cca4-4fbf-8685-a3c75238c32a",
                            OfferPointId = 20,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Core.Entities.PointEntity.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Settlement")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Points");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "місто Остріг, Рівненська область, вулиця Східна",
                            Latitude = 50.328792,
                            Longitude = 26.527293,
                            Order = 0,
                            Region = "Рівненська область",
                            Settlement = "Острог"
                        },
                        new
                        {
                            Id = 2,
                            Address = "місто Шпанів, Рівненська область, вулиця Вереснева",
                            Latitude = 50.663542,
                            Longitude = 26.257569,
                            Order = 0,
                            Region = " Рівненська область",
                            Settlement = "Шпанів"
                        },
                        new
                        {
                            Id = 3,
                            Address = "місто Луцьк, Волинська область, вулиця Хрещата",
                            Latitude = 50.723970999999999,
                            Longitude = 25.386282000000001,
                            Order = 0,
                            Region = "Волинська область",
                            Settlement = "Луцьк"
                        },
                        new
                        {
                            Id = 4,
                            Address = "місто Дніпро, Дніпропетровська область, вулиця Юрія Савченко",
                            Latitude = 48.462322270000001,
                            Longitude = 35.021573400000001,
                            Order = 0,
                            Region = "Дніпропетровська область",
                            Settlement = "Дніпро"
                        },
                        new
                        {
                            Id = 5,
                            Address = "місто Нікольське, Донецька область, вулиця Пушкіна",
                            Latitude = 47.200732350000003,
                            Longitude = 37.3148804,
                            Order = 0,
                            Region = "Донецька область",
                            Settlement = "Нікольське"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Макаровка, Донецька область",
                            Latitude = 47.779212000000001,
                            Longitude = 36.801640999999996,
                            Order = 0,
                            Region = "Донецька область",
                            Settlement = "Макаровка"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Гаврилівка, Харківська область, вулиця Коцюбинського",
                            Latitude = 49.672877999999997,
                            Longitude = 35.660035000000001,
                            Order = 0,
                            Region = "Харківська область",
                            Settlement = "Дніпро"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Ульянівка, Харківська область",
                            Latitude = 49.371445999999999,
                            Longitude = 35.513638,
                            Order = 0,
                            Region = "Харківська область",
                            Settlement = "Ульянівка"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Новодонецьк, Донецька область, вулиця Благовісна",
                            Latitude = 48.633740000000003,
                            Longitude = 36.980499999999999,
                            Order = 0,
                            Region = "Донецька область",
                            Settlement = "Новодонецьк"
                        },
                        new
                        {
                            Id = 10,
                            Address = "місто Дніпро, Дніпропетровська область, вулиця Юрія Савченко",
                            Latitude = 48.460256999999999,
                            Longitude = 35.018729,
                            Order = 0,
                            Region = "Дніпропетровська область",
                            Settlement = "Дніпро"
                        },
                        new
                        {
                            Id = 11,
                            Address = "місто Львів, Львівська область, просп. Вячеслава Черновола, 11",
                            Latitude = 49.846894900000002,
                            Longitude = 4.0253360999999996,
                            Order = 0,
                            Region = "Львівська область",
                            Settlement = "Львів"
                        },
                        new
                        {
                            Id = 12,
                            Address = "місто Ужгород, Закарпатская область, вулиця Шишкіна, 1",
                            Latitude = 48.610622999999997,
                            Longitude = 22.317772999999999,
                            Order = 0,
                            Region = "Закарпатская область",
                            Settlement = "Ужгород"
                        },
                        new
                        {
                            Id = 13,
                            Address = "Маків, Хмельницька  область, провулок Прорізний",
                            Latitude = 48.784157,
                            Longitude = 26.702999999999999,
                            Order = 0,
                            Region = "Хмельницька  область",
                            Settlement = "Маків"
                        },
                        new
                        {
                            Id = 14,
                            Address = "місто Вінниця, Вінницька область, вулиця Братславська",
                            Latitude = 49.232585,
                            Longitude = 28.494243999999998,
                            Order = 0,
                            Region = "Вінницька область",
                            Settlement = "Вінниця"
                        },
                        new
                        {
                            Id = 15,
                            Address = "місто Миколаїв, Миколаївська область, вулиця Слов'янська",
                            Latitude = 47.032940848000003,
                            Longitude = 32.007182749999998,
                            Order = 0,
                            Region = "Миколаївська область",
                            Settlement = "Миколаїв"
                        },
                        new
                        {
                            Id = 16,
                            Address = "Центральний пайон, місто Миколаїв, Миколаївська область, вулиця Дачна",
                            Latitude = 47.044604,
                            Longitude = 32.030366999999998,
                            Order = 0,
                            Region = "Миколаївська область",
                            Settlement = "Миколаїв"
                        },
                        new
                        {
                            Id = 17,
                            Address = "Бобринець, Кіровоградська  область, вулиця Орджонікідзе",
                            Latitude = 48.061315,
                            Longitude = 32.158811,
                            Order = 0,
                            Region = "Кіровоградська  область",
                            Settlement = "Бобринець"
                        },
                        new
                        {
                            Id = 18,
                            Address = "Горбово, Чернігівська область, 16311",
                            Latitude = 51.45984,
                            Longitude = 31.561633,
                            Order = 0,
                            Region = "Чернігівська область",
                            Settlement = "Горбово"
                        },
                        new
                        {
                            Id = 19,
                            Address = "місто Біла церква, Київська область, вулиця Кірова",
                            Latitude = 49.807687086999998,
                            Longitude = 30.1144958,
                            Order = 0,
                            Region = "Київська область",
                            Settlement = "Біла церква"
                        },
                        new
                        {
                            Id = 20,
                            Address = "місто Житомир, Житомирська область, Богунський район",
                            Latitude = 50.259729999999998,
                            Longitude = 28.649229999999999,
                            Order = 0,
                            Region = "Житомирська область",
                            Settlement = "Житомир"
                        });
                });

            modelBuilder.Entity("Core.Entities.RatingEntity.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstimatorUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("RatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("RatingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstimatorUserId");

                    b.HasIndex("RatedUserId");

                    b.HasIndex("TripId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Core.Entities.RefreshTokenEntity.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Core.Entities.ReportEntity.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReporterUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ReportingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReportedUserId");

                    b.HasIndex("ReporterUserId");

                    b.HasIndex("TripId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Core.Entities.RoleEntity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SENDER"
                        },
                        new
                        {
                            Id = 2,
                            Name = "RECIPIENT"
                        });
                });

            modelBuilder.Entity("Core.Entities.TripEntity.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnded")
                        .HasColumnType("bit");

                    b.Property<float>("LoadCapacity")
                        .HasColumnType("real");

                    b.Property<int>("MaxRouteDeviationKm")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransportationCarId")
                        .HasColumnType("int");

                    b.Property<string>("TripCreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TransportationCarId");

                    b.HasIndex("TripCreatorId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c13328f8-cdcc-4b78-894d-f01d49a3d3a3",
                            ConcurrencyStamp = "c13328f8-cdcc-4b78-894d-f01d49a3d3a3",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "ed986759-5ed1-404b-80d1-aa4d7fa16a1b",
                            RoleId = "c13328f8-cdcc-4b78-894d-f01d49a3d3a3"
                        },
                        new
                        {
                            UserId = "24ae36dc-45b7-4efb-9c7e-2641a813703e",
                            RoleId = "c13328f8-cdcc-4b78-894d-f01d49a3d3a3"
                        },
                        new
                        {
                            UserId = "cd6ceeaf-fe6e-4bd1-9a1c-62fb18bbaa23",
                            RoleId = "c13328f8-cdcc-4b78-894d-f01d49a3d3a3"
                        },
                        new
                        {
                            UserId = "c586b47a-e79f-425c-a148-fdf6808b2d3b",
                            RoleId = "c13328f8-cdcc-4b78-894d-f01d49a3d3a3"
                        },
                        new
                        {
                            UserId = "3870b76e-d01d-49a2-97b6-618862ed378b",
                            RoleId = "c13328f8-cdcc-4b78-894d-f01d49a3d3a3"
                        },
                        new
                        {
                            UserId = "2dacf970-cca4-4fbf-8685-a3c75238c32a",
                            RoleId = "c13328f8-cdcc-4b78-894d-f01d49a3d3a3"
                        },
                        new
                        {
                            UserId = "f5e5ba53-e2fc-4d07-be91-8f488219da70",
                            RoleId = "c13328f8-cdcc-4b78-894d-f01d49a3d3a3"
                        },
                        new
                        {
                            UserId = "297cac55-efe3-4924-a55f-0b1c16196292",
                            RoleId = "c13328f8-cdcc-4b78-894d-f01d49a3d3a3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PointTrip", b =>
                {
                    b.Property<int>("PointsId")
                        .HasColumnType("int");

                    b.Property<int>("TripsId")
                        .HasColumnType("int");

                    b.HasKey("PointsId", "TripsId");

                    b.HasIndex("TripsId");

                    b.ToTable("PointTrip");
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("HasCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "ed986759-5ed1-404b-80d1-aa4d7fa16a1b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd70673b-312b-4b2a-89f4-bb4d5e8aef04",
                            Email = "chorrny228@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CHORRNY228@GMAIL.COM",
                            NormalizedUserName = "CHORRNY228@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJL0UkBzj8XwyJ9Nw/1w2ahhhnjwktk8gr4zUThTYmL5HHL2ETrG3hYubbPJeMy5Vw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ccdb0902-7d1d-4af9-9d09-0f3434150025",
                            TwoFactorEnabled = false,
                            UserName = "chorrny228@gmail.com",
                            HasCar = false,
                            Name = "Vadym",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 5, 13, 13, 9, 27, 46, DateTimeKind.Unspecified).AddTicks(3592), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Chorrny"
                        },
                        new
                        {
                            Id = "24ae36dc-45b7-4efb-9c7e-2641a813703e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "060c2ea9-cdb1-49d3-959e-fa181c686774",
                            Email = "oppaiarchmaster@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPPAIARCHMASTER@GMAIL.COM",
                            NormalizedUserName = "OPPAIARCHMASTER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHeBTh0KLPYLNcmC1wFF0KO96450F/jB1Tf5ZTPsp5rTPskoOh1kLZfHwPm507ugqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d6f1ad5-bfc7-4f44-a7fc-d06f34b08bc3",
                            TwoFactorEnabled = false,
                            UserName = "oppaiarchmaster@gmail.com",
                            HasCar = false,
                            Name = "Vlad",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 5, 13, 13, 9, 27, 46, DateTimeKind.Unspecified).AddTicks(6909), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Sevastyanov"
                        },
                        new
                        {
                            Id = "2dacf970-cca4-4fbf-8685-a3c75238c32a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d08cddbe-0748-4e04-8298-5ff34d62db76",
                            Email = "andrewchepeliuk@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDREWCHEPELIUK@GMAIL.COM",
                            NormalizedUserName = "ANDREWCHEPELIUK@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELtZ0XrQEcC0Kge7EXaCwLCE2eAF34TJp3BGr4AHr3PgI3j1deZJglKrg4GyRPrReg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb079b4b-ed50-46de-8d71-ce93859eb475",
                            TwoFactorEnabled = false,
                            UserName = "andrewchepeliuk@gmail.com",
                            HasCar = false,
                            Name = "Andrii",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 5, 13, 13, 9, 27, 46, DateTimeKind.Unspecified).AddTicks(6945), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Chepeliuk"
                        },
                        new
                        {
                            Id = "c586b47a-e79f-425c-a148-fdf6808b2d3b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c5725f53-bc8d-413d-8c6b-359f21342919",
                            Email = "marynakernychna@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARYNAKERNYCHNA@GMAIL.COM",
                            NormalizedUserName = "MARYNAKERNYCHNA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGFsvD1PrzCsHyyH1ye2oRcwzg9eVBhkTkH3b3ub+vbt1wV7RaSeL7FoPgWb82sGAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f94c1321-ea3f-4642-8036-246a0b4a9fc3",
                            TwoFactorEnabled = false,
                            UserName = "marynakernychna@gmail.com",
                            HasCar = false,
                            Name = "Maryna",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 5, 13, 13, 9, 27, 46, DateTimeKind.Unspecified).AddTicks(6955), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Kernychna"
                        },
                        new
                        {
                            Id = "f5e5ba53-e2fc-4d07-be91-8f488219da70",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73cd61eb-da6f-430a-a6e0-e1740cc1e4da",
                            Email = "yevhen.pasichnyk@oa.edu.ua",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "YEVHEN.PASICHNYK@OA.EDU.UA",
                            NormalizedUserName = "YEVHEN.PASICHNYK@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEAq6h0Hs6mS38fv9lAYflErjWg141AvEUB0uXMV/u+2DpYQdZF/CsunaCnnK24qjJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b84011d8-d911-44f2-8ef9-687a6901e307",
                            TwoFactorEnabled = false,
                            UserName = "yevhen.pasichnyk@oa.edu.ua",
                            HasCar = false,
                            Name = "Eugen",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 5, 13, 13, 9, 27, 46, DateTimeKind.Unspecified).AddTicks(6966), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Pasichnyk"
                        },
                        new
                        {
                            Id = "cd6ceeaf-fe6e-4bd1-9a1c-62fb18bbaa23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08add9fd-39c4-490e-ba45-5b3c76e1d58d",
                            Email = "pashunskyi@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PASHUNSKYI@GMAIL.COM",
                            NormalizedUserName = "PASHUNSKYI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKLFvZBI/GS+FW/9Vf/u4jv+BA2AK3dAViZWvvfRQ3aV1GVgvx4NuONH2RHB8/gVMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "13500339-f6c5-474c-b44f-962c80f2a032",
                            TwoFactorEnabled = false,
                            UserName = "pashunskyi@gmail.com",
                            HasCar = false,
                            Name = "Volodya",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 5, 13, 13, 9, 27, 46, DateTimeKind.Unspecified).AddTicks(6976), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Pashunskyi"
                        },
                        new
                        {
                            Id = "3870b76e-d01d-49a2-97b6-618862ed378b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89c1759d-9c7d-41b5-9ac1-821b89880b94",
                            Email = "antonina.loboda@oa.edu.ua",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANTONINA.LOBODA@OA.EDU.UA",
                            NormalizedUserName = "ANTONINA.LOBODA@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAECFmmiANc6Uq9/mrqLT3VLf6AuTX4+i1c3s8YkYhNZ9rY2wVoopI9lEB5TYeRUUQ2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2dcfe1f7-f023-4c6f-ac1c-62833098faac",
                            TwoFactorEnabled = false,
                            UserName = "antonina.loboda@oa.edu.ua",
                            HasCar = false,
                            Name = "Antinina",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 5, 13, 13, 9, 27, 46, DateTimeKind.Unspecified).AddTicks(6984), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Loboda"
                        },
                        new
                        {
                            Id = "297cac55-efe3-4924-a55f-0b1c16196292",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "924b0c2a-d1b3-42df-875a-7881849c59bf",
                            Email = "sergeyeremenko@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SERGEYEREMENKO@GMAIL.COM",
                            NormalizedUserName = "SERGEYEREMENKO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOMyehOTDfjP25Ef6Lj8wvmzMHgWPqHxHOYnNK6BigLkzoTJqdOpt5UkzLVIHpU1kg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df259045-efc5-4682-954b-03421ec92f0b",
                            TwoFactorEnabled = false,
                            UserName = "sergeyeremenko@gmail.com",
                            HasCar = false,
                            Name = "Sergey",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 5, 13, 13, 9, 27, 46, DateTimeKind.Unspecified).AddTicks(6992), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Eremenko"
                        });
                });

            modelBuilder.Entity("Core.Entities.CarEntity.Car", b =>
                {
                    b.HasOne("Core.Entities.CarCategoryEntity.CarCategory", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.OfferEntity.Offer", b =>
                {
                    b.HasOne("Core.Entities.RoleEntity.Role", "Role")
                        .WithMany("Offers")
                        .HasForeignKey("CreatorRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.GoodCategoryEntity.GoodCategory", "GoodCategory")
                        .WithMany("Offers")
                        .HasForeignKey("GoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Offers")
                        .HasForeignKey("OfferCreatorId");

                    b.HasOne("Core.Entities.PointEntity.Point", "Point")
                        .WithMany("Offers")
                        .HasForeignKey("OfferPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Offers")
                        .HasForeignKey("RelatedTripId");

                    b.Navigation("GoodCategory");

                    b.Navigation("Point");

                    b.Navigation("Role");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.RatingEntity.Rating", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", "EstimatorUser")
                        .WithMany("EstimatorRatings")
                        .HasForeignKey("EstimatorUserId");

                    b.HasOne("Core.Entities.UserEntity.User", "RatedUser")
                        .WithMany("RatedRatings")
                        .HasForeignKey("RatedUserId");

                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Ratings")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstimatorUser");

                    b.Navigation("RatedUser");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Core.Entities.RefreshTokenEntity.RefreshToken", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.ReportEntity.Report", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", "ReportedUser")
                        .WithMany("ViolationReports")
                        .HasForeignKey("ReportedUserId");

                    b.HasOne("Core.Entities.UserEntity.User", "ReporterUser")
                        .WithMany("ReporterReports")
                        .HasForeignKey("ReporterUserId");

                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Reports")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportedUser");

                    b.Navigation("ReporterUser");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Core.Entities.TripEntity.Trip", b =>
                {
                    b.HasOne("Core.Entities.CarEntity.Car", "Car")
                        .WithMany("Trips")
                        .HasForeignKey("TransportationCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("TripCreatorId");

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PointTrip", b =>
                {
                    b.HasOne("Core.Entities.PointEntity.Point", null)
                        .WithMany()
                        .HasForeignKey("PointsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TripEntity.Trip", null)
                        .WithMany()
                        .HasForeignKey("TripsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.CarCategoryEntity.CarCategory", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Core.Entities.CarEntity.Car", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Core.Entities.GoodCategoryEntity.GoodCategory", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Core.Entities.PointEntity.Point", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Core.Entities.RoleEntity.Role", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Core.Entities.TripEntity.Trip", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("Ratings");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("EstimatorRatings");

                    b.Navigation("Offers");

                    b.Navigation("RatedRatings");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ReporterReports");

                    b.Navigation("Trips");

                    b.Navigation("ViolationReports");
                });
#pragma warning restore 612, 618
        }
    }
}
