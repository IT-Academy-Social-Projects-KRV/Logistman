// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220519142819_Renamed Role entities and added Seeds")]
    partial class RenamedRoleentitiesandaddedSeeds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.CarCategoryEntity.CarCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CarCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "B"
                        },
                        new
                        {
                            Id = 3,
                            Name = "C"
                        },
                        new
                        {
                            Id = 4,
                            Name = "D"
                        });
                });

            modelBuilder.Entity("Core.Entities.CarEntity.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<float>("LoadCapacity")
                        .HasColumnType("real");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TechnicalPassport")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vin")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Color = "Синій",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 5, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 824.19965f,
                            Model = "P 623 O",
                            RegistrationNumber = "BK1EQN2X80O6E5XWHB2W",
                            TechnicalPassport = "HA4NNRZVSG8YVSWAVV4D",
                            UserId = "07bd7727-f9d1-4258-a15d-a322adc28233",
                            Vin = "Y1FTNQHK70JO31GDR"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            Color = "Синій",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 5, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 748.8656f,
                            Model = "D 802 U",
                            RegistrationNumber = "QAL8N1M6O7PC27U48E89",
                            TechnicalPassport = "8F7PVTH45PIN69PI1IUJ",
                            UserId = "fe0aae3f-c4b8-4e65-a9dd-37dc84f6395e",
                            Vin = "UHDPD6XUFSWIJA3WD"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Color = "Чорний",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 5, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 816.4727f,
                            Model = "A 988 S",
                            RegistrationNumber = "26SHB3QKOOFLQB6GA6B9",
                            TechnicalPassport = "PQNQFF550Y2SUSBILOLR",
                            UserId = "1229b494-9a5c-47af-9759-e987cbb1d4b2",
                            Vin = "7U4OCK6D9BPPZCJ22"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Color = "Синій",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 4, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 787.02655f,
                            Model = "O 752 P",
                            RegistrationNumber = "MQY0NVMKKKGISLQ3LYNP",
                            TechnicalPassport = "R35SZZIMQT3PH8HYDJJI",
                            UserId = "fe0aae3f-c4b8-4e65-a9dd-37dc84f6395e",
                            Vin = "54JTQGCRBNW0UIL61"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Color = "Чорний",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 3, 13, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 565.36066f,
                            Model = "V 755 M",
                            RegistrationNumber = "R0K4SP2E520Y095919YH",
                            TechnicalPassport = "GSHDYC7IV5NWENRT5CK2",
                            UserId = "07bd7727-f9d1-4258-a15d-a322adc28233",
                            Vin = "QYUKLWVDAQV80YJ65"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Color = "Червоний",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 1, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 760.6366f,
                            Model = "N 999 K",
                            RegistrationNumber = "4JDHC3PPW882IJEQAMIU",
                            TechnicalPassport = "W06MS9Z74KQPQJQ08FJ9",
                            UserId = "07bd7727-f9d1-4258-a15d-a322adc28233",
                            Vin = "Y0SW0NQP6W05I3DQP"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Color = "Синій",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 4, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 588.2732f,
                            Model = "P 392 M",
                            RegistrationNumber = "JBZTDIV388V16TW8BGFD",
                            TechnicalPassport = "TOL0MNHQG53FNI9K1UD6",
                            UserId = "07bd7727-f9d1-4258-a15d-a322adc28233",
                            Vin = "SWM16XSTT16XOUQY6"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Color = "Жовтий",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 3, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 600.7593f,
                            Model = "Q 179 D",
                            RegistrationNumber = "GENJB7H2820VOELGKXMB",
                            TechnicalPassport = "18PUEU3NN655PR6MIDGM",
                            UserId = "07bd7727-f9d1-4258-a15d-a322adc28233",
                            Vin = "YVNZ1KL9F70R37PT5"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            Color = "Синій",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 1, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 535.33105f,
                            Model = "K 152 X",
                            RegistrationNumber = "U5X7YY7G0Z2AT6FSJ2EQ",
                            TechnicalPassport = "X5YNYXO7ZIIJVYST3CMA",
                            UserId = "07bd7727-f9d1-4258-a15d-a322adc28233",
                            Vin = "0R0WVNQOKR0BYP7A9"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Color = "Білий",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 5, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 619.53314f,
                            Model = "M 542 M",
                            RegistrationNumber = "IEVDLP7F3I646M121HBY",
                            TechnicalPassport = "RJKZ3MT2M18AIAHI0A5Z",
                            UserId = "07bd7727-f9d1-4258-a15d-a322adc28233",
                            Vin = "XTSK1N7Y8I6JPZUVA"
                        });
                });

            modelBuilder.Entity("Core.Entities.GoodCategoryEntity.GoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("GoodCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "FOOD"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DRINKS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CLOTHING"
                        },
                        new
                        {
                            Id = 4,
                            Name = "FOOTWEAR"
                        },
                        new
                        {
                            Id = 5,
                            Name = "HYGIENE PRODUCTS"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CAMOUFLAGE"
                        },
                        new
                        {
                            Id = 7,
                            Name = "MEDICINES"
                        });
                });

            modelBuilder.Entity("Core.Entities.OfferEntity.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatorRoleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("GoodCategoryId")
                        .HasColumnType("int");

                    b.Property<float>("GoodsWeight")
                        .HasColumnType("real");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<string>("OfferCreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OfferPointId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedTripId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CreatorRoleId");

                    b.HasIndex("GoodCategoryId");

                    b.HasIndex("OfferCreatorId");

                    b.HasIndex("OfferPointId");

                    b.HasIndex("RelatedTripId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Markets innovate Balanced Baht communities Light Product Finland silver channels communities Baby & Books Wisconsin Tasty Frozen Soap Guyana Dollar Sleek Quality-focused Missouri.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 6, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 6,
                            GoodsWeight = 126.26133f,
                            IsClosed = false,
                            OfferCreatorId = "a59f1cac-b55c-4177-867a-76ce07d54dbf",
                            OfferPointId = 1,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "copying Missouri Planner rich New Israeli Sheqel Senior tan monitor Forges calculating.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 5, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 3,
                            GoodsWeight = 600.98145f,
                            IsClosed = false,
                            OfferCreatorId = "fe0aae3f-c4b8-4e65-a9dd-37dc84f6395e",
                            OfferPointId = 2,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Practical Plastic Chicken Refined Producer Home Loan Account Cambridgeshire Fantastic Plastic Shirt Incredible Rubber Pants Administrator Object-based Sleek Practical Metal Pants Wallis and Futuna Point leading edge bandwidth digital Robust Intelligent Functionality cross-platform scalable calculating HTTP Branding indigo Home Loan Account multi-byte Gorgeous Grocery & Tools.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 8, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 4,
                            GoodsWeight = 99.324585f,
                            IsClosed = false,
                            OfferCreatorId = "6ae73725-bd78-4bd1-ad55-c92ec6ae41c4",
                            OfferPointId = 3,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 4, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Front-line Sports & Clothing Belize Dollar indexing primary Papua New Guinea Money Market Account deposit grey payment digital Street.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 10, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 2,
                            GoodsWeight = 394.5672f,
                            IsClosed = false,
                            OfferCreatorId = "4eeb7de8-2ace-412e-8bd2-54ee369484ff",
                            OfferPointId = 4,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "International strategic Sharable RAM communities digital e-business sensor e-services Bedfordshire Sleek Granite Hat bypassing Specialist Borders Baby payment Engineer maroon pink.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 5, 23, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 1,
                            GoodsWeight = 267.8336f,
                            IsClosed = false,
                            OfferCreatorId = "3bf717ed-c2ae-4393-9ff7-5bece832e240",
                            OfferPointId = 5,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "invoice Granite IB strategize fuchsia intuitive generating Auto Loan Account Proactive Pennsylvania optimizing Diverse Future Assistant 5th generation Sri Lanka Baby Lithuanian Litas Bedfordshire open-source ivory metrics exuding calculate ROI deploy open system Customer Investor.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 6, 13, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 3,
                            GoodsWeight = 588.6934f,
                            IsClosed = false,
                            OfferCreatorId = "283e4baf-a46d-467e-8c3c-d7c58fa41046",
                            OfferPointId = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Soft Chief bricks-and-clicks enterprise Avon Consultant turn-key SSL Refined Soft Keyboard mindshare synergistic Awesome Fresh Fish Developer Movies & Tools Rubber calculating Sleek Handcrafted Fresh Tuna Mobility Walks.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 7, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 2,
                            GoodsWeight = 702.2551f,
                            IsClosed = false,
                            OfferCreatorId = "283e4baf-a46d-467e-8c3c-d7c58fa41046",
                            OfferPointId = 7,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 4, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "vortals indigo program Auto Loan Account back up repurpose Analyst functionalities Buckinghamshire asymmetric circuit.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 10, 22, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 1,
                            GoodsWeight = 710.86816f,
                            IsClosed = false,
                            OfferCreatorId = "3bf717ed-c2ae-4393-9ff7-5bece832e240",
                            OfferPointId = 8,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 4, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "neural-net system-worthy next generation Metal National withdrawal HTTP Parks Generic Granite Shirt Up-sized Corner Cotton Saint Helena niches parse Land Berkshire.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 9, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 6,
                            GoodsWeight = 116.9796f,
                            IsClosed = false,
                            OfferCreatorId = "283e4baf-a46d-467e-8c3c-d7c58fa41046",
                            OfferPointId = 9,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "e-commerce invoice hacking pink strategize Savings Account optimize Handmade Fresh Mouse architect Mauritius invoice Borders violet Universal deposit Berkshire tan Borders Balboa green mesh Engineer.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 5, 21, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 5,
                            GoodsWeight = 110.36929f,
                            IsClosed = false,
                            OfferCreatorId = "283e4baf-a46d-467e-8c3c-d7c58fa41046",
                            OfferPointId = 10,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 11,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Bangladesh parsing copying uniform hack Buckinghamshire whiteboard Baby, Home & Garden Buckinghamshire Games & Music overriding Unions Avon Steel web services encompassing New York violet Kuwaiti Dinar Chief multi-byte Cliff solutions index Steel Namibia.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 5, 21, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 1,
                            GoodsWeight = 668.4513f,
                            IsClosed = false,
                            OfferCreatorId = "1229b494-9a5c-47af-9759-e987cbb1d4b2",
                            OfferPointId = 11,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 12,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Director matrix application Connecticut deposit Ergonomic Rubber Hat empowering Polarised syndicate grey Bond Markets Units European Composite Unit (EURCO) deploy payment alarm Generic Metal Mouse.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 8, 22, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 3,
                            GoodsWeight = 952.275f,
                            IsClosed = false,
                            OfferCreatorId = "fe0aae3f-c4b8-4e65-a9dd-37dc84f6395e",
                            OfferPointId = 12,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 3, 5, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 13,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Rustic Concrete Computer Representative Fantastic Buckinghamshire Iraq Bahamas Ports generating array AI Liaison portals e-markets Pound Sterling Auto Loan Account Generic Steel Bike schemas convergence Fort Universal Czech Republic yellow ubiquitous Automated Hawaii Producer Wooden Rial Omani.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 6, 13, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 6,
                            GoodsWeight = 546.89856f,
                            IsClosed = false,
                            OfferCreatorId = "a59f1cac-b55c-4177-867a-76ce07d54dbf",
                            OfferPointId = 13,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 3, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 14,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "TCP architect Intelligent Soft Hat Estate Generic Intelligent Plastic Bike bypass Hawaii THX archive artificial intelligence parse Awesome Shoes, Outdoors & Garden Tasty Colombian Peso USB.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 5, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 4,
                            GoodsWeight = 684.08136f,
                            IsClosed = false,
                            OfferCreatorId = "fe0aae3f-c4b8-4e65-a9dd-37dc84f6395e",
                            OfferPointId = 14,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 15,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "dedicated Directives Nevada Bedfordshire port Factors metrics Causeway orange SQL overriding analyzing SMS Drives Re-contextualized Licensed Rubber Pants Peso Uruguayo Street Diverse.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 9, 21, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 2,
                            GoodsWeight = 390.08023f,
                            IsClosed = false,
                            OfferCreatorId = "4eeb7de8-2ace-412e-8bd2-54ee369484ff",
                            OfferPointId = 15,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 7, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 16,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Future 24/365 calculate Persevering Tasty Fresh Ball SDD website Manager Fantastic Steel Keyboard Lodge revolutionary invoice transmit Haven deposit Washington National benchmark enterprise.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 8, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 1,
                            GoodsWeight = 618.17096f,
                            IsClosed = false,
                            OfferCreatorId = "3bf717ed-c2ae-4393-9ff7-5bece832e240",
                            OfferPointId = 16,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 17,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Fantastic Passage navigating feed HTTP invoice secured line Intuitive New York Home Loan Account evolve.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 5, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 4,
                            GoodsWeight = 652.03516f,
                            IsClosed = false,
                            OfferCreatorId = "6ae73725-bd78-4bd1-ad55-c92ec6ae41c4",
                            OfferPointId = 17,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 5, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 18,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "transmit hard drive quantifying Creek transmitter neural 3rd generation migration Small Frozen Pants Dale Assurance Rest Beauty, Beauty & Sports Concrete Research upward-trending convergence Licensed Plastic Bacon neural Belarussian Ruble Fantastic Plastic Salad Director Gorgeous Rubber Pizza Games, Baby & Clothing Savings Account.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 6, 22, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 1,
                            GoodsWeight = 976.43115f,
                            IsClosed = false,
                            OfferCreatorId = "6ae73725-bd78-4bd1-ad55-c92ec6ae41c4",
                            OfferPointId = 18,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 4, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 19,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "firewall multi-byte pink Fresh Customer Identity olive synthesizing Beauty, Tools & Outdoors Inlet Bhutan payment bypassing Licensed Incredible Rubber Keyboard Borders Checking Account optimizing Steel Ridges magnetic Cameroon Investor withdrawal.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 6, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 4,
                            GoodsWeight = 652.57825f,
                            IsClosed = false,
                            OfferCreatorId = "fe0aae3f-c4b8-4e65-a9dd-37dc84f6395e",
                            OfferPointId = 19,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 7, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 20,
                            CreationDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Pound Sterling transmit transmitter Awesome Granite Pants maroon Fork invoice users 1080p blue Cape Verde Escudo Bedfordshire calculate optical didactic Awesome Rubber Shoes enhance programming tangible Clothing, Electronics & Movies Steel.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 7, 20, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 3,
                            GoodsWeight = 41.65277f,
                            IsClosed = false,
                            OfferCreatorId = "1229b494-9a5c-47af-9759-e987cbb1d4b2",
                            OfferPointId = 20,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Core.Entities.PointEntity.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Settlement")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Points");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "місто Остріг, Рівненська область, вулиця Східна",
                            Latitude = 50.328792,
                            Longitude = 26.527293,
                            Order = 0,
                            Region = "Рівненська область",
                            Settlement = "Острог"
                        },
                        new
                        {
                            Id = 2,
                            Address = "місто Шпанів, Рівненська область, вулиця Вереснева",
                            Latitude = 50.663542,
                            Longitude = 26.257569,
                            Order = 0,
                            Region = " Рівненська область",
                            Settlement = "Шпанів"
                        },
                        new
                        {
                            Id = 3,
                            Address = "місто Луцьк, Волинська область, вулиця Хрещата",
                            Latitude = 50.723970999999999,
                            Longitude = 25.386282000000001,
                            Order = 0,
                            Region = "Волинська область",
                            Settlement = "Луцьк"
                        },
                        new
                        {
                            Id = 4,
                            Address = "місто Дніпро, Дніпропетровська область, вулиця Юрія Савченко",
                            Latitude = 48.462322270000001,
                            Longitude = 35.021573400000001,
                            Order = 0,
                            Region = "Дніпропетровська область",
                            Settlement = "Дніпро"
                        },
                        new
                        {
                            Id = 5,
                            Address = "місто Нікольське, Донецька область, вулиця Пушкіна",
                            Latitude = 47.200732350000003,
                            Longitude = 37.3148804,
                            Order = 0,
                            Region = "Донецька область",
                            Settlement = "Нікольське"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Макаровка, Донецька область",
                            Latitude = 47.779212000000001,
                            Longitude = 36.801640999999996,
                            Order = 0,
                            Region = "Донецька область",
                            Settlement = "Макаровка"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Гаврилівка, Харківська область, вулиця Коцюбинського",
                            Latitude = 49.672877999999997,
                            Longitude = 35.660035000000001,
                            Order = 0,
                            Region = "Харківська область",
                            Settlement = "Дніпро"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Ульянівка, Харківська область",
                            Latitude = 49.371445999999999,
                            Longitude = 35.513638,
                            Order = 0,
                            Region = "Харківська область",
                            Settlement = "Ульянівка"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Новодонецьк, Донецька область, вулиця Благовісна",
                            Latitude = 48.633740000000003,
                            Longitude = 36.980499999999999,
                            Order = 0,
                            Region = "Донецька область",
                            Settlement = "Новодонецьк"
                        },
                        new
                        {
                            Id = 10,
                            Address = "місто Дніпро, Дніпропетровська область, вулиця Юрія Савченко",
                            Latitude = 48.460256999999999,
                            Longitude = 35.018729,
                            Order = 0,
                            Region = "Дніпропетровська область",
                            Settlement = "Дніпро"
                        },
                        new
                        {
                            Id = 11,
                            Address = "місто Львів, Львівська область, просп. Вячеслава Черновола, 11",
                            Latitude = 49.846894900000002,
                            Longitude = 4.0253360999999996,
                            Order = 0,
                            Region = "Львівська область",
                            Settlement = "Львів"
                        },
                        new
                        {
                            Id = 12,
                            Address = "місто Ужгород, Закарпатская область, вулиця Шишкіна, 1",
                            Latitude = 48.610622999999997,
                            Longitude = 22.317772999999999,
                            Order = 0,
                            Region = "Закарпатская область",
                            Settlement = "Ужгород"
                        },
                        new
                        {
                            Id = 13,
                            Address = "Маків, Хмельницька  область, провулок Прорізний",
                            Latitude = 48.784157,
                            Longitude = 26.702999999999999,
                            Order = 0,
                            Region = "Хмельницька  область",
                            Settlement = "Маків"
                        },
                        new
                        {
                            Id = 14,
                            Address = "місто Вінниця, Вінницька область, вулиця Братславська",
                            Latitude = 49.232585,
                            Longitude = 28.494243999999998,
                            Order = 0,
                            Region = "Вінницька область",
                            Settlement = "Вінниця"
                        },
                        new
                        {
                            Id = 15,
                            Address = "місто Миколаїв, Миколаївська область, вулиця Слов'янська",
                            Latitude = 47.032940848000003,
                            Longitude = 32.007182749999998,
                            Order = 0,
                            Region = "Миколаївська область",
                            Settlement = "Миколаїв"
                        },
                        new
                        {
                            Id = 16,
                            Address = "Центральний пайон, місто Миколаїв, Миколаївська область, вулиця Дачна",
                            Latitude = 47.044604,
                            Longitude = 32.030366999999998,
                            Order = 0,
                            Region = "Миколаївська область",
                            Settlement = "Миколаїв"
                        },
                        new
                        {
                            Id = 17,
                            Address = "Бобринець, Кіровоградська  область, вулиця Орджонікідзе",
                            Latitude = 48.061315,
                            Longitude = 32.158811,
                            Order = 0,
                            Region = "Кіровоградська  область",
                            Settlement = "Бобринець"
                        },
                        new
                        {
                            Id = 18,
                            Address = "Горбово, Чернігівська область, 16311",
                            Latitude = 51.45984,
                            Longitude = 31.561633,
                            Order = 0,
                            Region = "Чернігівська область",
                            Settlement = "Горбово"
                        },
                        new
                        {
                            Id = 19,
                            Address = "місто Біла церква, Київська область, вулиця Кірова",
                            Latitude = 49.807687086999998,
                            Longitude = 30.1144958,
                            Order = 0,
                            Region = "Київська область",
                            Settlement = "Біла церква"
                        },
                        new
                        {
                            Id = 20,
                            Address = "місто Житомир, Житомирська область, Богунський район",
                            Latitude = 50.259729999999998,
                            Longitude = 28.649229999999999,
                            Order = 0,
                            Region = "Житомирська область",
                            Settlement = "Житомир"
                        });
                });

            modelBuilder.Entity("Core.Entities.RatingEntity.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstimatorUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("RatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("RatingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstimatorUserId");

                    b.HasIndex("RatedUserId");

                    b.HasIndex("TripId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Core.Entities.RefreshTokenEntity.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Core.Entities.ReportEntity.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReporterUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ReportingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReportedUserId");

                    b.HasIndex("ReporterUserId");

                    b.HasIndex("TripId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Core.Entities.RoleEntity.OfferRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OfferRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SENDER"
                        },
                        new
                        {
                            Id = 2,
                            Name = "RECIPIENT"
                        });
                });

            modelBuilder.Entity("Core.Entities.TripEntity.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnded")
                        .HasColumnType("bit");

                    b.Property<float>("LoadCapacity")
                        .HasColumnType("real");

                    b.Property<int>("MaxRouteDeviationKm")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransportationCarId")
                        .HasColumnType("int");

                    b.Property<string>("TripCreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TransportationCarId");

                    b.HasIndex("TripCreatorId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "69fa01c1-e668-4614-a01d-e9716a07a2d5",
                            ConcurrencyStamp = "69fa01c1-e668-4614-a01d-e9716a07a2d5",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "425a592e-8fc7-463f-87a7-77f5d5ac05a9",
                            ConcurrencyStamp = "425a592e-8fc7-463f-87a7-77f5d5ac05a9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1d0fcc4b-3661-4313-9eb3-90ac13f5390a",
                            ConcurrencyStamp = "1d0fcc4b-3661-4313-9eb3-90ac13f5390a",
                            Name = "Logist",
                            NormalizedName = "LOGIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "fe0aae3f-c4b8-4e65-a9dd-37dc84f6395e",
                            RoleId = "69fa01c1-e668-4614-a01d-e9716a07a2d5"
                        },
                        new
                        {
                            UserId = "283e4baf-a46d-467e-8c3c-d7c58fa41046",
                            RoleId = "69fa01c1-e668-4614-a01d-e9716a07a2d5"
                        },
                        new
                        {
                            UserId = "6ae73725-bd78-4bd1-ad55-c92ec6ae41c4",
                            RoleId = "69fa01c1-e668-4614-a01d-e9716a07a2d5"
                        },
                        new
                        {
                            UserId = "3bf717ed-c2ae-4393-9ff7-5bece832e240",
                            RoleId = "69fa01c1-e668-4614-a01d-e9716a07a2d5"
                        },
                        new
                        {
                            UserId = "4eeb7de8-2ace-412e-8bd2-54ee369484ff",
                            RoleId = "69fa01c1-e668-4614-a01d-e9716a07a2d5"
                        },
                        new
                        {
                            UserId = "1229b494-9a5c-47af-9759-e987cbb1d4b2",
                            RoleId = "69fa01c1-e668-4614-a01d-e9716a07a2d5"
                        },
                        new
                        {
                            UserId = "a59f1cac-b55c-4177-867a-76ce07d54dbf",
                            RoleId = "69fa01c1-e668-4614-a01d-e9716a07a2d5"
                        },
                        new
                        {
                            UserId = "07bd7727-f9d1-4258-a15d-a322adc28233",
                            RoleId = "69fa01c1-e668-4614-a01d-e9716a07a2d5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PointTrip", b =>
                {
                    b.Property<int>("PointsId")
                        .HasColumnType("int");

                    b.Property<int>("TripsId")
                        .HasColumnType("int");

                    b.HasKey("PointsId", "TripsId");

                    b.HasIndex("TripsId");

                    b.ToTable("PointTrip");
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("HasCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "fe0aae3f-c4b8-4e65-a9dd-37dc84f6395e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66e23b16-717a-45f3-91b6-b7801cd29994",
                            Email = "chorrny228@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CHORRNY228@GMAIL.COM",
                            NormalizedUserName = "CHORRNY228@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKrinxDfGhsESgCrZ7X/faPALOT6vF1I514WNAlo/W5YHx3ISwUmpM0ZzdWgm4jBRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3bb613bd-69cb-467c-87b7-f1a0e860f426",
                            TwoFactorEnabled = false,
                            UserName = "chorrny228@gmail.com",
                            HasCar = false,
                            Name = "Vadym",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 5, 19, 14, 28, 18, 252, DateTimeKind.Unspecified).AddTicks(4967), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Chorrny"
                        },
                        new
                        {
                            Id = "283e4baf-a46d-467e-8c3c-d7c58fa41046",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "deeb1aac-dc76-44fa-b6b7-607380a11224",
                            Email = "oppaiarchmaster@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPPAIARCHMASTER@GMAIL.COM",
                            NormalizedUserName = "OPPAIARCHMASTER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB3/Kpast7pb6ZCJmZu23Py3TIhQxdsYAnMxVJJ6ZsAFlg2yrFQ/C9b0Ye3+mVRgTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5bfc7653-6fcd-4466-87c5-1f1ae4d7d9ed",
                            TwoFactorEnabled = false,
                            UserName = "oppaiarchmaster@gmail.com",
                            HasCar = false,
                            Name = "Vlad",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 5, 19, 14, 28, 18, 252, DateTimeKind.Unspecified).AddTicks(6645), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Sevastyanov"
                        },
                        new
                        {
                            Id = "1229b494-9a5c-47af-9759-e987cbb1d4b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe842564-eb07-4889-bdb5-3772700c0fad",
                            Email = "andrewchepeliuk@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDREWCHEPELIUK@GMAIL.COM",
                            NormalizedUserName = "ANDREWCHEPELIUK@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPeNiGWr3vxfYnIuIzTe/MilrYlaeuH/4G516aAEV9AlwHTlrWcnu2I6dsCl1VcfrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "886c952f-2ba3-4142-a45d-bc2e18cd08e8",
                            TwoFactorEnabled = false,
                            UserName = "andrewchepeliuk@gmail.com",
                            HasCar = false,
                            Name = "Andrii",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 5, 19, 14, 28, 18, 252, DateTimeKind.Unspecified).AddTicks(6709), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Chepeliuk"
                        },
                        new
                        {
                            Id = "3bf717ed-c2ae-4393-9ff7-5bece832e240",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1108343c-954e-42d3-a50c-affd980cdc0e",
                            Email = "marynakernychna@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARYNAKERNYCHNA@GMAIL.COM",
                            NormalizedUserName = "MARYNAKERNYCHNA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ7gXNFV0R9IP8NgzAAe8uhccQY3iu8FF8tFP0NWu2cdL98aDwHH0+FS3gMkXE+Cwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f494238-2261-4def-9659-659534d1d98b",
                            TwoFactorEnabled = false,
                            UserName = "marynakernychna@gmail.com",
                            HasCar = false,
                            Name = "Maryna",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 5, 19, 14, 28, 18, 252, DateTimeKind.Unspecified).AddTicks(6727), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Kernychna"
                        },
                        new
                        {
                            Id = "a59f1cac-b55c-4177-867a-76ce07d54dbf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88fb5fee-cd6d-47a7-bc9f-c624b8692e83",
                            Email = "yevhen.pasichnyk@oa.edu.ua",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "YEVHEN.PASICHNYK@OA.EDU.UA",
                            NormalizedUserName = "YEVHEN.PASICHNYK@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEOGhbB2v+wmTz8gCWHQVaXN0TWbWCMu8ekilsZ3bewzKGCouvgEg5PYoMbFWCtEGSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9c854dc-18a4-45ff-9e86-54a1a6011993",
                            TwoFactorEnabled = false,
                            UserName = "yevhen.pasichnyk@oa.edu.ua",
                            HasCar = false,
                            Name = "Eugen",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 5, 19, 14, 28, 18, 252, DateTimeKind.Unspecified).AddTicks(6743), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Pasichnyk"
                        },
                        new
                        {
                            Id = "6ae73725-bd78-4bd1-ad55-c92ec6ae41c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25904b66-99d2-4fd6-bcd4-045b90b4a36d",
                            Email = "pashunskyi@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PASHUNSKYI@GMAIL.COM",
                            NormalizedUserName = "PASHUNSKYI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELVbhhl2QSjFAFg2edwEHgoFx6PSKUqtgw4yqvSryelsgU41qrRMwxoBuIsUw50Lyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd0c5ece-2629-4be8-87f4-406d073acdf3",
                            TwoFactorEnabled = false,
                            UserName = "pashunskyi@gmail.com",
                            HasCar = false,
                            Name = "Volodya",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 5, 19, 14, 28, 18, 252, DateTimeKind.Unspecified).AddTicks(6840), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Pashunskyi"
                        },
                        new
                        {
                            Id = "4eeb7de8-2ace-412e-8bd2-54ee369484ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c047eba9-c20e-4471-9e7b-ddb793f0e9e5",
                            Email = "antonina.loboda@oa.edu.ua",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANTONINA.LOBODA@OA.EDU.UA",
                            NormalizedUserName = "ANTONINA.LOBODA@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEPkP/UALVXFuYAvPXwwr5o0cYizkiWVeYUp9CsoMEwnuX6kldtpUz7+Q5yM1jb/MvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e827eee6-5499-4258-b0cd-6f203441b029",
                            TwoFactorEnabled = false,
                            UserName = "antonina.loboda@oa.edu.ua",
                            HasCar = false,
                            Name = "Antonina",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 5, 19, 14, 28, 18, 252, DateTimeKind.Unspecified).AddTicks(6854), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Loboda"
                        },
                        new
                        {
                            Id = "07bd7727-f9d1-4258-a15d-a322adc28233",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "031166ce-9b33-4e34-801d-3a161ca1a45c",
                            Email = "sergeyeremenko@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SERGEYEREMENKO@GMAIL.COM",
                            NormalizedUserName = "SERGEYEREMENKO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFjXuwi8t0aB5N+UPsJEDL0NfN+ltM7ezjDDkibTjcphuGOmnc9W5TttMXRyjwIJaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b03b1b2e-9c41-486b-a21c-154a08af724e",
                            TwoFactorEnabled = false,
                            UserName = "sergeyeremenko@gmail.com",
                            HasCar = false,
                            Name = "Sergey",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 5, 19, 14, 28, 18, 252, DateTimeKind.Unspecified).AddTicks(6869), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Eremenko"
                        });
                });

            modelBuilder.Entity("Core.Entities.CarEntity.Car", b =>
                {
                    b.HasOne("Core.Entities.CarCategoryEntity.CarCategory", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.OfferEntity.Offer", b =>
                {
                    b.HasOne("Core.Entities.RoleEntity.OfferRole", "OfferRole")
                        .WithMany("Offers")
                        .HasForeignKey("CreatorRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.GoodCategoryEntity.GoodCategory", "GoodCategory")
                        .WithMany("Offers")
                        .HasForeignKey("GoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Offers")
                        .HasForeignKey("OfferCreatorId");

                    b.HasOne("Core.Entities.PointEntity.Point", "Point")
                        .WithMany("Offers")
                        .HasForeignKey("OfferPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Offers")
                        .HasForeignKey("RelatedTripId");

                    b.Navigation("GoodCategory");

                    b.Navigation("OfferRole");

                    b.Navigation("Point");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.RatingEntity.Rating", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", "EstimatorUser")
                        .WithMany("EstimatorRatings")
                        .HasForeignKey("EstimatorUserId");

                    b.HasOne("Core.Entities.UserEntity.User", "RatedUser")
                        .WithMany("RatedRatings")
                        .HasForeignKey("RatedUserId");

                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Ratings")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstimatorUser");

                    b.Navigation("RatedUser");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Core.Entities.RefreshTokenEntity.RefreshToken", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.ReportEntity.Report", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", "ReportedUser")
                        .WithMany("ViolationReports")
                        .HasForeignKey("ReportedUserId");

                    b.HasOne("Core.Entities.UserEntity.User", "ReporterUser")
                        .WithMany("ReporterReports")
                        .HasForeignKey("ReporterUserId");

                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Reports")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportedUser");

                    b.Navigation("ReporterUser");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Core.Entities.TripEntity.Trip", b =>
                {
                    b.HasOne("Core.Entities.CarEntity.Car", "Car")
                        .WithMany("Trips")
                        .HasForeignKey("TransportationCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("TripCreatorId");

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PointTrip", b =>
                {
                    b.HasOne("Core.Entities.PointEntity.Point", null)
                        .WithMany()
                        .HasForeignKey("PointsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TripEntity.Trip", null)
                        .WithMany()
                        .HasForeignKey("TripsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.CarCategoryEntity.CarCategory", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Core.Entities.CarEntity.Car", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Core.Entities.GoodCategoryEntity.GoodCategory", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Core.Entities.PointEntity.Point", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Core.Entities.RoleEntity.OfferRole", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Core.Entities.TripEntity.Trip", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("Ratings");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("EstimatorRatings");

                    b.Navigation("Offers");

                    b.Navigation("RatedRatings");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ReporterReports");

                    b.Navigation("Trips");

                    b.Navigation("ViolationReports");
                });
#pragma warning restore 612, 618
        }
    }
}
