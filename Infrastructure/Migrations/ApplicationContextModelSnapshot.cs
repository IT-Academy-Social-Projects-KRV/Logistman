// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.CarCategoryEntity.CarCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CarCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "B"
                        },
                        new
                        {
                            Id = 3,
                            Name = "C"
                        },
                        new
                        {
                            Id = 4,
                            Name = "D"
                        });
                });

            modelBuilder.Entity("Core.Entities.CarEntity.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<float>("LoadCapacity")
                        .HasColumnType("real");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TechnicalPassport")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vin")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 4,
                            Color = "Green",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 3, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 902f,
                            Model = "Porsche,Cayenne, SUV",
                            RegistrationNumber = "AA4567XI",
                            TechnicalPassport = "2GK6LDT26YZRDMRU4KX8",
                            UserId = "692de99f-b9a9-4a4b-a55f-21ce4271f939",
                            Vin = "1S9762U0HZH82DJ3U"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Color = "Grey",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 2, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 505f,
                            Model = "Ford,F250 Super Duty Super Cab, Pickup",
                            RegistrationNumber = "BC2234OP",
                            TechnicalPassport = "WV8CRTNZ48E5GFRXE7Q7",
                            UserId = "04ff0446-f062-4454-adad-a4bfea6139f7",
                            Vin = "Z95JDB0QIYWD5W1VE"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Color = "Blue",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 3, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 633f,
                            Model = "Ford,F350 Super Duty Crew Cab, Pickup",
                            RegistrationNumber = "BH4456AI",
                            TechnicalPassport = "R32MXS6G7IQ1FWY78FCY",
                            UserId = "f8b58450-009e-4af8-b647-a2eabff473fc",
                            Vin = "G93AUVISH053862XG"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            Color = "Red",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 5, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 656f,
                            Model = "Ford,F250 Super Duty Super Cab, Pickup",
                            RegistrationNumber = "AC6344AC",
                            TechnicalPassport = "F5CP02O6TV2Z1MTINXAX",
                            UserId = "04ff0446-f062-4454-adad-a4bfea6139f7",
                            Vin = "PWCNS5AZT44F03QKT"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Color = "Red",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 5, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 901f,
                            Model = "Nissan,Titan King Cab, Pickup",
                            RegistrationNumber = "BH1232AA",
                            TechnicalPassport = "5237J8ESLJBVEGFDDAIW",
                            UserId = "1c6ceb41-ad5b-4d4a-b899-15b0b6a879aa",
                            Vin = "YVLMQS23H2TDKT9G8"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Color = "Red",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 3, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 700f,
                            Model = "Ford,F250 Super Duty Super Cab, Pickup",
                            RegistrationNumber = "AA5421BH",
                            TechnicalPassport = "KSKLNA7GJCPT348LWIMQ",
                            UserId = "ea8a0dfd-b6fa-4ca4-910e-d15656d2c904",
                            Vin = "911VM4W1L1NUD2112"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Color = "Blue",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 1, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 699f,
                            Model = "Porsche,Cayenne, SUV",
                            RegistrationNumber = "BC7739AA",
                            TechnicalPassport = "Q4JGO0UCE8GPIJIJRO3K",
                            UserId = "1c6ceb41-ad5b-4d4a-b899-15b0b6a879aa",
                            Vin = "N69R5KUF5VV4IXIEX"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Color = "Red",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 993f,
                            Model = "Jeep,Wrangler Unlimited, SUV",
                            RegistrationNumber = "BH2333XI",
                            TechnicalPassport = "T64VIIIBSR2F0GC7XUAH",
                            UserId = "1c6ceb41-ad5b-4d4a-b899-15b0b6a879aa",
                            Vin = "LUD1L0DRZISJU04WN"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            Color = "Blue",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 5, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 426f,
                            Model = "Ford,F350 Super Duty Crew Cab, Pickup",
                            RegistrationNumber = "AA8992BH",
                            TechnicalPassport = "3TOHG67Z8R77QL9HHWIY",
                            UserId = "f8b58450-009e-4af8-b647-a2eabff473fc",
                            Vin = "JNHLC21784VPH1OJ5"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Color = "Grey",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 2, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 421f,
                            Model = "Nissan,TITAN XD Crew Cab, Pickup",
                            RegistrationNumber = "AC1273IX",
                            TechnicalPassport = "QLB3FVE55U6BC910UU4Y",
                            UserId = "98d4ce1c-d790-475f-abfc-baee8153acd2",
                            Vin = "3C138SYRORA0T15HX"
                        });
                });

            modelBuilder.Entity("Core.Entities.GoodCategoryEntity.GoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("GoodCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "FOOD"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DRINKS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CLOTHING"
                        },
                        new
                        {
                            Id = 4,
                            Name = "FOOTWEAR"
                        },
                        new
                        {
                            Id = 5,
                            Name = "HYGIENE PRODUCTS"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CAMOUFLAGE"
                        },
                        new
                        {
                            Id = 7,
                            Name = "MEDICINES"
                        });
                });

            modelBuilder.Entity("Core.Entities.InviteEntity.Invite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("Core.Entities.NotificationEntity.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Core.Entities.OfferEntity.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatorRoleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoodCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("GoodTransferConfirmedByCreator")
                        .HasColumnType("bit");

                    b.Property<bool>("GoodTransferConfirmedByDriver")
                        .HasColumnType("bit");

                    b.Property<float>("GoodsWeight")
                        .HasColumnType("real");

                    b.Property<bool>("IsAnsweredByCreator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAnsweredByDriver")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("OfferCreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OfferPointId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedTripId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CreatorRoleId");

                    b.HasIndex("GoodCategoryId");

                    b.HasIndex("NotificationId")
                        .IsUnique()
                        .HasFilter("[NotificationId] IS NOT NULL");

                    b.HasIndex("OfferCreatorId");

                    b.HasIndex("OfferPointId")
                        .IsUnique();

                    b.HasIndex("RelatedTripId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 30, 6, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Lehner - Rosenbaumturquoise Investment Account Montserrat Awesome Rubber Soap cyan Sao Tome and Principe white Lock evolve Credit Card Account approach Comoros Incredible Rubber Keyboard Bedfordshire clear-thinking payment Optimization New Hampshire sensor Buckinghamshire.",
                            GoodCategoryId = 6,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 364.7925f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "98d4ce1c-d790-475f-abfc-baee8153acd2",
                            OfferPointId = 1,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 29, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Torp IncGlobal Awesome Fresh Gloves applications Markets Fresh Money Market Account Cotton time-frame PNG leading-edge Pre-emptive Cordoba Oro withdrawal convergence Generic Wooden Soap bifurcated Junctions Forge Unbranded Rubber Car Montana circuit Sri Lanka Rupee auxiliary Coordinator.",
                            GoodCategoryId = 4,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 314.32077f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "04ff0446-f062-4454-adad-a4bfea6139f7",
                            OfferPointId = 2,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 4, 7, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 28, 19, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Berge - JohnstonOperative Argentine Peso Tasty programming expedite withdrawal Connecticut Intelligent Plastic Shoes invoice Bahamian Dollar Springs homogeneous bypassing Kansas Club Avon backing up open-source Handmade.",
                            GoodCategoryId = 3,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 640.20197f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "f90ecf75-1f79-40ae-908b-a3625cff0366",
                            OfferPointId = 3,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 30, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Crooks and SonsTools Buckinghamshire Frozen Accounts Crossroad interface Small Rubber Chips Bedfordshire Fantastic Steel Shirt Paradigm redundant Automated solutions Kina Product Rest Shoes & Movies XML Borders Global Money Market Account Unbranded Soft Pizza ROI.",
                            GoodCategoryId = 2,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 994.0864f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "692de99f-b9a9-4a4b-a55f-21ce4271f939",
                            OfferPointId = 4,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 4, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 20, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Tillman, Heathcote and HarrisGranite quantify XSS Rubber Operations Turkey technologies projection Human Madagascar digital withdrawal port navigating Fantastic Frozen Keyboard Ergonomic Soft Chair USB system engine Money Market Account.",
                            GoodCategoryId = 6,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 452.18347f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "f8b58450-009e-4af8-b647-a2eabff473fc",
                            OfferPointId = 5,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 4, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 28, 20, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Swift - Schummsynthesizing invoice indexing generating Metal Mozambique Louisiana copy Money Market Account Marketing.",
                            GoodCategoryId = 4,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 568.2782f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "ea8a0dfd-b6fa-4ca4-910e-d15656d2c904",
                            OfferPointId = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 3, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 28, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Toy, Durgan and Beckersky blue Director deploy Corporate functionalities Pa'anga Forward hacking Steel hack task-force withdrawal Team-oriented Rustic Fresh Tuna Group Unbranded robust Alabama generate panel Illinois SAS Automotive, Shoes & Clothing online Central Synergized.",
                            GoodCategoryId = 3,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 532.5248f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "ea8a0dfd-b6fa-4ca4-910e-d15656d2c904",
                            OfferPointId = 7,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 23, 19, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Weissnat, Gottlieb and RathBuckinghamshire Corners European Monetary Unit (E.M.U.-6) Expressway content Michigan RSS purple Marketing Directives Club green Chief West Virginia PNG matrix Small Customer-focused Generic Wooden Towels Glens indexing Technician Street Connecticut neural back-end Maryland Park ivory interactive.",
                            GoodCategoryId = 7,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 328.6254f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "f8b58450-009e-4af8-b647-a2eabff473fc",
                            OfferPointId = 8,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 4, 5, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 24, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Berge GroupClothing & Games Reduced Gorgeous Plastic Fish scale Analyst leading edge Cambridgeshire New Jersey portals silver Integration access policy Mills Cotton reboot redundant.",
                            GoodCategoryId = 7,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 143.61719f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "ea8a0dfd-b6fa-4ca4-910e-d15656d2c904",
                            OfferPointId = 9,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 25, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "McLaughlin LLCinvoice synergize Honduras Web ivory red paradigms Investor Fresh Mountains array bypass Swedish Krona Practical Intranet PCI Ridges back-end mission-critical Producer Burundi protocol Cross-platform.",
                            GoodCategoryId = 6,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 412.77887f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "ea8a0dfd-b6fa-4ca4-910e-d15656d2c904",
                            OfferPointId = 10,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 3, 5, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 11,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 27, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Bogan, Tromp and Handorchestration virtual Buckinghamshire Personal Loan Account redundant monitor ROI Accountability backing up Plaza.",
                            GoodCategoryId = 3,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 697.3272f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "1c6ceb41-ad5b-4d4a-b899-15b0b6a879aa",
                            OfferPointId = 11,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 12,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 24, 19, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Bogan LLCSierra Leone Books & Health turquoise Music & Games models Saint Helena Pound Home Loan Account Maine Steel open system interactive Sleek Metal Chair Home Loan Account global Chief European Unit of Account 17(E.U.A.-17) Monitored Jamaican Dollar.",
                            GoodCategoryId = 4,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 11.272459f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "04ff0446-f062-4454-adad-a4bfea6139f7",
                            OfferPointId = 12,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 13,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 24, 5, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Walker - SengerEquatorial Guinea Multi-layered Bedfordshire Rubber cross-media parsing multi-byte Principal 1080p Tools, Music & Clothing driver Rustic Soft Car success Djibouti Franc Steel Officer Lock drive deposit Planner.",
                            GoodCategoryId = 5,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 12.937578f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "98d4ce1c-d790-475f-abfc-baee8153acd2",
                            OfferPointId = 13,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 14,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 27, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Tromp, Bruen and ChristiansenMews Groves Incredible Granite Car primary wireless Virginia cross-platform model Quality Games, Books & Sports Distributed Savings Account Licensed Wooden Chips Investment Account Zambian Kwacha Concrete Estate Rustic Granite Bike.",
                            GoodCategoryId = 5,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 650.59564f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "04ff0446-f062-4454-adad-a4bfea6139f7",
                            OfferPointId = 14,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 15,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 24, 7, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Daniel and SonsFTP supply-chains Direct SAS copy Seychelles Rupee Optimization Cotton maroon Borders Designer transmitter Refined Granite Chips Mills Virginia Idaho Maine Ports.",
                            GoodCategoryId = 2,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 332.6192f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "692de99f-b9a9-4a4b-a55f-21ce4271f939",
                            OfferPointId = 15,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 7, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 16,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 21, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "White - JakubowskiEthiopia user-centric European Unit of Account 17(E.U.A.-17) action-items Plains alliance Personal Loan Account Extended application Handmade Frozen Fish haptic Rustic Concrete Fish Rubber contextually-based.",
                            GoodCategoryId = 3,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 462.44882f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "f8b58450-009e-4af8-b647-a2eabff473fc",
                            OfferPointId = 16,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 17,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 28, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Nikolaus Groupparse B2B Bhutanese Ngultrum Grocery transmitter withdrawal connect neural Papua New Guinea deposit Incredible Steel Towels web-enabled Direct Awesome Granite Salad.",
                            GoodCategoryId = 2,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 746.38556f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "f90ecf75-1f79-40ae-908b-a3625cff0366",
                            OfferPointId = 17,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 18,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 20, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Renner, Anderson and ChamplinSquare Sports & Garden SMS Marketing Developer Money Market Account Rupiah Direct Electronics & Home generate bluetooth Checking Account Refined Implementation Forward invoice wireless Licensed Concrete Pizza Pennsylvania compress Up-sized.",
                            GoodCategoryId = 5,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 60.56118f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "f90ecf75-1f79-40ae-908b-a3625cff0366",
                            OfferPointId = 18,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 19,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 29, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Conn IncSSL Peso Uruguayo Checking Account Seamless neural Personal Loan Account Books Devolved bricks-and-clicks Consultant Maryland Rand Facilitator complexity Sleek Granite Fish XSS bypassing one-to-one Mountain Architect.",
                            GoodCategoryId = 1,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 397.64587f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "04ff0446-f062-4454-adad-a4bfea6139f7",
                            OfferPointId = 19,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 6, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 20,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 29, 21, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "McKenzie, Wuckert and Jastcard backing up SMTP upward-trending Port leading-edge purple Concrete Refined Wooden Ball Buckinghamshire.",
                            GoodCategoryId = 6,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 86.41176f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "692de99f-b9a9-4a4b-a55f-21ce4271f939",
                            OfferPointId = 20,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 21,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 7, 13, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "My 1 offer",
                            GoodCategoryId = 5,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 120f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "98d4ce1c-d790-475f-abfc-baee8153acd2",
                            OfferPointId = 21,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 13, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 22,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 7, 18, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "My 2 offer",
                            GoodCategoryId = 3,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 120f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "f8b58450-009e-4af8-b647-a2eabff473fc",
                            OfferPointId = 22,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 18, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 23,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 7, 20, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "My 3 offer",
                            GoodCategoryId = 4,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 120f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "ea8a0dfd-b6fa-4ca4-910e-d15656d2c904",
                            OfferPointId = 23,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 20, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 24,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 7, 22, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "My 4 offer",
                            GoodCategoryId = 4,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 120f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "692de99f-b9a9-4a4b-a55f-21ce4271f939",
                            OfferPointId = 24,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 22, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 25,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 7, 24, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "My 5 offer",
                            GoodCategoryId = 1,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 120f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "98d4ce1c-d790-475f-abfc-baee8153acd2",
                            OfferPointId = 25,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 24, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 26,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 7, 1, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "My 6 offer",
                            GoodCategoryId = 5,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 120f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "f8b58450-009e-4af8-b647-a2eabff473fc",
                            OfferPointId = 26,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 27,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 7, 28, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "My 7 offer",
                            GoodCategoryId = 2,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 120f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "ea8a0dfd-b6fa-4ca4-910e-d15656d2c904",
                            OfferPointId = 27,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 28, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 28,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 8, 1, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "My 8 offer",
                            GoodCategoryId = 5,
                            GoodTransferConfirmedByCreator = false,
                            GoodTransferConfirmedByDriver = false,
                            GoodsWeight = 120f,
                            IsAnsweredByCreator = false,
                            IsAnsweredByDriver = false,
                            IsClosed = false,
                            OfferCreatorId = "692de99f-b9a9-4a4b-a55f-21ce4271f939",
                            OfferPointId = 28,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Core.Entities.PointEntity.PointData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Settlement")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("Points");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "вулиця Східна, 32",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (26.5283633 50.3288577)"),
                            OfferId = 1,
                            Order = 0,
                            Postcode = "35800",
                            Region = "Рівненська область",
                            Settlement = "Острог"
                        },
                        new
                        {
                            Id = 2,
                            Address = "вулиця Соборна, 5",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (26.2614291 50.6175848)"),
                            OfferId = 2,
                            Order = 0,
                            Postcode = "33000",
                            Region = "Рівненська область",
                            Settlement = "Рівне"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Вишнівецька вулиця, 30",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (25.3839251 50.724626)"),
                            OfferId = 3,
                            Order = 0,
                            Postcode = "43000",
                            Region = "Волинська область",
                            Settlement = "Луцьк"
                        },
                        new
                        {
                            Id = 4,
                            Address = "вулиця Юрія Савченко, 1",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (35.0256349 48.4674516)"),
                            OfferId = 4,
                            Order = 0,
                            Postcode = "49000",
                            Region = "Дніпропетровська область",
                            Settlement = "Дніпро"
                        },
                        new
                        {
                            Id = 5,
                            Address = "вулиця Пушкіна, 1",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (37.3386598 47.1917281)"),
                            OfferId = 5,
                            Order = 0,
                            Postcode = "87000",
                            Region = "Донецька область",
                            Settlement = "Нікольське"
                        },
                        new
                        {
                            Id = 6,
                            Address = "вулиця Садова, 1",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (32.0033648 46.9690278)"),
                            OfferId = 6,
                            Order = 0,
                            Postcode = "54000",
                            Region = "Миколаївська область",
                            Settlement = "Миколаїв"
                        },
                        new
                        {
                            Id = 7,
                            Address = "вулиця Павлова, 1",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (32.2345305 48.5175858)"),
                            OfferId = 7,
                            Order = 0,
                            Postcode = "25000",
                            Region = "Кіровоградська область",
                            Settlement = "Кропивницький"
                        },
                        new
                        {
                            Id = 8,
                            Address = "вулиця Чкалова, 20",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (32.2277797 48.5183484)"),
                            OfferId = 8,
                            Order = 0,
                            Postcode = "25000",
                            Region = "Кіровоградська область",
                            Settlement = "Кропивницький"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Посадочна вулиця, 5",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (32.2269653 48.5181244)"),
                            OfferId = 9,
                            Order = 0,
                            Postcode = "25000",
                            Region = "Кіровоградська область",
                            Settlement = "Кропивницький"
                        },
                        new
                        {
                            Id = 10,
                            Address = "вулиця Юрія Савченка, 3",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (35.0247707 48.4658504)"),
                            OfferId = 10,
                            Order = 0,
                            Postcode = "49000",
                            Region = "Дніпропетровська область",
                            Settlement = "Дніпро"
                        },
                        new
                        {
                            Id = 11,
                            Address = "просп. Вячеслава Черновола, 11",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (24.0253381 49.8468734)"),
                            OfferId = 11,
                            Order = 0,
                            Postcode = "79000",
                            Region = "Львівська область",
                            Settlement = "Львів"
                        },
                        new
                        {
                            Id = 12,
                            Address = "вулиця Шишкіна, 1",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (22.3178905 48.6102995)"),
                            OfferId = 12,
                            Order = 0,
                            Postcode = "88000",
                            Region = "Закарпатська область",
                            Settlement = "Ужгород"
                        },
                        new
                        {
                            Id = 13,
                            Address = "вулиця Козацька, 1",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (26.9919167 49.4178562)"),
                            OfferId = 13,
                            Order = 0,
                            Postcode = "29000",
                            Region = "Хмельницька  область",
                            Settlement = "Хмельницький"
                        },
                        new
                        {
                            Id = 14,
                            Address = "вулиця Братиславська, 1",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (33.3286723 47.8847308)"),
                            OfferId = 14,
                            Order = 0,
                            Postcode = "50000",
                            Region = "Дніпропетровська область",
                            Settlement = "Кривий Ріг"
                        },
                        new
                        {
                            Id = 15,
                            Address = "вулиця Слов'янська, 1",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (32.0147107 47.031949)"),
                            OfferId = 15,
                            Order = 0,
                            Postcode = "54000",
                            Region = "Миколаївська область",
                            Settlement = "Миколаїв"
                        },
                        new
                        {
                            Id = 16,
                            Address = "вулиця Привільна, 1",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (32.0222338 46.9858772)"),
                            OfferId = 16,
                            Order = 0,
                            Postcode = "54000",
                            Region = "Миколаївська область",
                            Settlement = "Миколаїв"
                        },
                        new
                        {
                            Id = 17,
                            Address = "вулиця Привільна, 10",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (32.0210963 46.9880672)"),
                            OfferId = 17,
                            Order = 0,
                            Postcode = "54000",
                            Region = "Миколаївська область",
                            Settlement = "Миколаїв"
                        },
                        new
                        {
                            Id = 18,
                            Address = "вулиця В'ячеслава Чорновола, 1",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (25.36196 50.755603)"),
                            OfferId = 18,
                            Order = 0,
                            Postcode = "43000",
                            Region = "Волинська область",
                            Settlement = "Луцьк"
                        },
                        new
                        {
                            Id = 19,
                            Address = "вулиця Острозька, 1",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (26.8544323 50.3006939)"),
                            OfferId = 19,
                            Order = 0,
                            Postcode = "30000",
                            Region = "Хмельницька область",
                            Settlement = "Славута"
                        },
                        new
                        {
                            Id = 20,
                            Address = "вулиця Бориса Тена, 2",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (28.6727154 50.2541948)"),
                            OfferId = 20,
                            Order = 0,
                            Postcode = "10001",
                            Region = "Житомирська область",
                            Settlement = "Житомир"
                        },
                        new
                        {
                            Id = 21,
                            Address = "вул Соборна 44б",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.4570465 48.3880023)"),
                            OfferId = 21,
                            Order = 0,
                            Postcode = "26500",
                            Region = "Кіровоградська область",
                            Settlement = "Голованівськ"
                        },
                        new
                        {
                            Id = 22,
                            Address = "Центральна 119",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.1641172 48.1413224)"),
                            OfferId = 22,
                            Order = 0,
                            Postcode = "66221",
                            Region = "Одеська область",
                            Settlement = "Вільшанка"
                        },
                        new
                        {
                            Id = 23,
                            Address = "Криве Озеро",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.3443027 47.9484405)"),
                            OfferId = 23,
                            Order = 0,
                            Postcode = "55100",
                            Region = "Миколаївська область",
                            Settlement = "Криве Озеро"
                        },
                        new
                        {
                            Id = 24,
                            Address = "вулиця Шевченка, 10",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.9116167 47.1991193)"),
                            OfferId = 24,
                            Order = 0,
                            Postcode = "67301",
                            Region = "Одеська область",
                            Settlement = "Березівка"
                        },
                        new
                        {
                            Id = 25,
                            Address = "Трасса Е 95",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.317371 47.0234622)"),
                            OfferId = 25,
                            Order = 0,
                            Postcode = "67211",
                            Region = "Одеська область",
                            Settlement = "Знам'янка"
                        },
                        new
                        {
                            Id = 26,
                            Address = "48Q2+JJ Дубинове",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.3017199 48.1390924)"),
                            OfferId = 26,
                            Order = 0,
                            Postcode = "66220",
                            Region = "Одеська область",
                            Settlement = "Дубинове"
                        },
                        new
                        {
                            Id = 27,
                            Address = "вулиця Медична, 19",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (33.3832712 47.8876902)"),
                            OfferId = 27,
                            Order = 0,
                            Postcode = "50005",
                            Region = "Дніпропетровська область",
                            Settlement = "Кривий Ріг"
                        },
                        new
                        {
                            Id = 28,
                            Address = "вул. Станціонна, 1",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (32.4974225 47.5464278)"),
                            OfferId = 28,
                            Order = 0,
                            Postcode = "55642",
                            Region = "Миколаївська область",
                            Settlement = "Новополтавка"
                        },
                        new
                        {
                            Id = 29,
                            Address = "вулиця Волкова, 2",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.2557039 48.7424709)"),
                            Order = 1,
                            Postcode = "20300",
                            Region = "Черкаська область",
                            Settlement = "Умань",
                            TripId = 1
                        },
                        new
                        {
                            Id = 30,
                            Address = "48Q2+JJ",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.3017199 48.1390924)"),
                            Order = 2,
                            Postcode = "20300",
                            Region = "Одеська область",
                            Settlement = "Дубинове",
                            TripId = 1
                        },
                        new
                        {
                            Id = 31,
                            Address = "28F8+9X",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.3174055 47.0235592)"),
                            Order = 3,
                            Postcode = "20300",
                            Region = "Одеська область",
                            Settlement = "Знам'янка",
                            TripId = 1
                        },
                        new
                        {
                            Id = 32,
                            Address = "вулиця Мічуріна, 41",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.6598914 46.4932837)"),
                            Order = 4,
                            Postcode = "65000",
                            Region = "Одеська область",
                            Settlement = "Одеса",
                            TripId = 1
                        },
                        new
                        {
                            Id = 33,
                            Address = "проспект Перемоги, ст. метро Житомирська",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.36545 50.45624)"),
                            Order = 1,
                            Postcode = "02000",
                            Region = "Київcька область",
                            Settlement = "Київ",
                            TripId = 2
                        },
                        new
                        {
                            Id = 34,
                            Address = "вулиця Київська, 77",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (28.68603 50.26679)"),
                            Order = 2,
                            Postcode = "10001",
                            Region = "Житомирська область",
                            Settlement = "Житомир",
                            TripId = 2
                        },
                        new
                        {
                            Id = 35,
                            Address = "вулиця Житомирська, 41-А",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (27.62649 50.58838)"),
                            Order = 3,
                            Postcode = "11702",
                            Region = "Житомирська область",
                            Settlement = "Новоград-Волинський",
                            TripId = 2
                        },
                        new
                        {
                            Id = 36,
                            Address = "майдан Незалежності, 2",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (26.2517 50.62034)"),
                            Order = 4,
                            Postcode = "33000",
                            Region = "Рівненська область",
                            Settlement = "Рівне",
                            TripId = 2
                        },
                        new
                        {
                            Id = 37,
                            Address = "вулиця Сухомлинського, 1",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (25.35595 50.7553)"),
                            Order = 1,
                            Postcode = "43000",
                            Region = "Волинська область",
                            Settlement = "Луцьк",
                            TripId = 3
                        },
                        new
                        {
                            Id = 38,
                            Address = "вулиця Луцька, 27",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (24.76512 50.50216)"),
                            Order = 2,
                            Postcode = "45700",
                            Region = "Волинська область",
                            Settlement = "Горохів",
                            TripId = 3
                        },
                        new
                        {
                            Id = 39,
                            Address = "вулиця Витківська",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (24.63097 50.28358)"),
                            Order = 3,
                            Postcode = "80200",
                            Region = "Львівська область",
                            Settlement = "Радехів",
                            TripId = 3
                        },
                        new
                        {
                            Id = 40,
                            Address = "вулиця Стрийська, 30 ТРЦ King Cross Leopolis",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (24.00991 49.77351)"),
                            Order = 4,
                            Postcode = "81130",
                            Region = "Львівська область",
                            Settlement = "Сокільники",
                            TripId = 3
                        },
                        new
                        {
                            Id = 41,
                            Address = "вулиця Дубравського, 6",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (23.85867 49.26081)"),
                            Order = 5,
                            Postcode = "82400",
                            Region = "Львівська область",
                            Settlement = "Стрий",
                            TripId = 3
                        },
                        new
                        {
                            Id = 42,
                            Address = "вулиця Верещагіна, 16",
                            Country = "Україна",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (22.3112 48.60822)"),
                            Order = 6,
                            Postcode = "88000",
                            Region = "Закарпатська область",
                            Settlement = "Ужгород",
                            TripId = 3
                        });
                });

            modelBuilder.Entity("Core.Entities.RatingEntity.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstimatorUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("RatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("RatingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstimatorUserId");

                    b.HasIndex("RatedUserId");

                    b.HasIndex("TripId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Core.Entities.RefreshTokenEntity.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Core.Entities.ReportEntity.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReporterUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ReportingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReportedUserId");

                    b.HasIndex("ReporterUserId");

                    b.HasIndex("TripId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Core.Entities.RoleEntity.OfferRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OfferRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SENDER"
                        },
                        new
                        {
                            Id = 2,
                            Name = "RECIPIENT"
                        });
                });

            modelBuilder.Entity("Core.Entities.TripEntity.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<float>("InitialDistance")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnded")
                        .HasColumnType("bit");

                    b.Property<float>("LoadCapacity")
                        .HasColumnType("real");

                    b.Property<int>("MaxRouteDeviationKm")
                        .HasColumnType("int");

                    b.Property<LineString>("RouteGeographyData")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransportationCarId")
                        .HasColumnType("int");

                    b.Property<string>("TripCreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TransportationCarId");

                    b.HasIndex("TripCreatorId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "It`s my first offer!",
                            Distance = 150f,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 8, 22, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            InitialDistance = 150f,
                            IsActive = false,
                            IsEnded = false,
                            LoadCapacity = 2000f,
                            MaxRouteDeviationKm = 20,
                            RouteGeographyData = (NetTopologySuite.Geometries.LineString)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;LINESTRING (30.2557039 48.7424709, 30.3017199 48.1390924, 30.3174055 47.0235592, 30.6598914 46.4932837)"),
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 10, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            TransportationCarId = 1,
                            TripCreatorId = "692de99f-b9a9-4a4b-a55f-21ce4271f939"
                        },
                        new
                        {
                            Id = 2,
                            Description = "I'm going from Kyiv to Rivne. So welcome!",
                            Distance = 400f,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 15, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            InitialDistance = 400f,
                            IsActive = false,
                            IsEnded = false,
                            LoadCapacity = 2000f,
                            MaxRouteDeviationKm = 15,
                            RouteGeographyData = (NetTopologySuite.Geometries.LineString)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;LINESTRING (30.36545 50.45624, 28.68603 50.26679, 27.62649 50.58838, 26.2517 50.62034)"),
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            TransportationCarId = 3,
                            TripCreatorId = "f8b58450-009e-4af8-b647-a2eabff473fc"
                        },
                        new
                        {
                            Id = 3,
                            Description = "I'm going from Lutsk to Uzhhorod. So welcome!",
                            Distance = 400f,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 18, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            InitialDistance = 400f,
                            IsActive = false,
                            IsEnded = false,
                            LoadCapacity = 2000f,
                            MaxRouteDeviationKm = 15,
                            RouteGeographyData = (NetTopologySuite.Geometries.LineString)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;LINESTRING (25.35595 50.7553, 24.76512 50.50216, 24.63097 50.28358, 24.00991 49.77351, 23.85867 49.26081, 22.3112 48.60822)"),
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            TransportationCarId = 10,
                            TripCreatorId = "98d4ce1c-d790-475f-abfc-baee8153acd2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "2e3c47d9-2223-4019-85ae-46364a0ffc88",
                            ConcurrencyStamp = "2e3c47d9-2223-4019-85ae-46364a0ffc88",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "109e60e0-391c-481e-a76b-541b0fa409c2",
                            ConcurrencyStamp = "109e60e0-391c-481e-a76b-541b0fa409c2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3a391563-974f-4ad8-b5cf-b195d285f60a",
                            ConcurrencyStamp = "3a391563-974f-4ad8-b5cf-b195d285f60a",
                            Name = "Logist",
                            NormalizedName = "LOGIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "04ff0446-f062-4454-adad-a4bfea6139f7",
                            RoleId = "2e3c47d9-2223-4019-85ae-46364a0ffc88"
                        },
                        new
                        {
                            UserId = "ea8a0dfd-b6fa-4ca4-910e-d15656d2c904",
                            RoleId = "2e3c47d9-2223-4019-85ae-46364a0ffc88"
                        },
                        new
                        {
                            UserId = "f90ecf75-1f79-40ae-908b-a3625cff0366",
                            RoleId = "2e3c47d9-2223-4019-85ae-46364a0ffc88"
                        },
                        new
                        {
                            UserId = "f8b58450-009e-4af8-b647-a2eabff473fc",
                            RoleId = "2e3c47d9-2223-4019-85ae-46364a0ffc88"
                        },
                        new
                        {
                            UserId = "692de99f-b9a9-4a4b-a55f-21ce4271f939",
                            RoleId = "2e3c47d9-2223-4019-85ae-46364a0ffc88"
                        },
                        new
                        {
                            UserId = "5c8465f0-422b-4488-8f50-80707f533648",
                            RoleId = "3a391563-974f-4ad8-b5cf-b195d285f60a"
                        },
                        new
                        {
                            UserId = "98d4ce1c-d790-475f-abfc-baee8153acd2",
                            RoleId = "2e3c47d9-2223-4019-85ae-46364a0ffc88"
                        },
                        new
                        {
                            UserId = "1c6ceb41-ad5b-4d4a-b899-15b0b6a879aa",
                            RoleId = "2e3c47d9-2223-4019-85ae-46364a0ffc88"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("ConfirmationEmailToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ConfirmationEmailTokenExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("HasCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "04ff0446-f062-4454-adad-a4bfea6139f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "064d3814-36d3-4114-b1b5-adb8aa37646f",
                            Email = "chorrny228@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CHORRNY228@GMAIL.COM",
                            NormalizedUserName = "CHORRNY228@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ1dQgjxwiBQ83gfYjgeYDcW/XlZ6LQczUsd+9frN0zavV5QPP1qg1dZ1D7/Tk4HGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c3d63907-47c6-42aa-94a4-56758c9dc994",
                            TwoFactorEnabled = false,
                            UserName = "chorrny228@gmail.com",
                            HasCar = false,
                            Name = "Vadym",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 7, 17, 16, 55, 47, 157, DateTimeKind.Unspecified).AddTicks(4594), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Chorrny"
                        },
                        new
                        {
                            Id = "ea8a0dfd-b6fa-4ca4-910e-d15656d2c904",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a9d1729-a410-4cb3-90a8-768461023410",
                            Email = "oppaiarchmaster@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPPAIARCHMASTER@GMAIL.COM",
                            NormalizedUserName = "OPPAIARCHMASTER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOlltBDPEDLpY5LAvo3Ro+9SJQzvnn3fTZ0H4Jl3vjoP/cjtyPvWzMHX0tV/6owVIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61bf5e30-ca78-4db1-8e7c-4e91b6d63155",
                            TwoFactorEnabled = false,
                            UserName = "oppaiarchmaster@gmail.com",
                            HasCar = false,
                            Name = "Vlad",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 7, 17, 16, 55, 47, 157, DateTimeKind.Unspecified).AddTicks(5887), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Sievostyanov"
                        },
                        new
                        {
                            Id = "5c8465f0-422b-4488-8f50-80707f533648",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2e72509-3dcb-4057-8da3-0e318f0f5f46",
                            Email = "andrewchepeliuk@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDREWCHEPELIUK@GMAIL.COM",
                            NormalizedUserName = "ANDREWCHEPELIUK@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHIRzhNUijPUDRSzqm80OAS0tV2j0cHuN3s/9D+vgTwi3MXS8yC8UjZF6yhkysMfRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7243190-95ba-4e5b-a27e-1c5b3c3910b3",
                            TwoFactorEnabled = false,
                            UserName = "andrewchepeliuk@gmail.com",
                            HasCar = false,
                            Name = "Andrii",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 7, 17, 16, 55, 47, 157, DateTimeKind.Unspecified).AddTicks(5946), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Chepeliuk"
                        },
                        new
                        {
                            Id = "f8b58450-009e-4af8-b647-a2eabff473fc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a19606f-9542-4088-aa03-96fc5f8b5c53",
                            Email = "mapourse@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAPOURSE@GMAIL.COM",
                            NormalizedUserName = "MAPOURSE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBxsEioHFhpah6v5zXTI88eY4J50vrMsA2NBMr829QId/BZq5eW125M/mErZTDE8qw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b969fe91-61af-47b4-bbd1-f884a25d76a8",
                            TwoFactorEnabled = false,
                            UserName = "mapourse@gmail.com",
                            HasCar = false,
                            Name = "Maryna",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 7, 17, 16, 55, 47, 157, DateTimeKind.Unspecified).AddTicks(5956), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Kernychna"
                        },
                        new
                        {
                            Id = "98d4ce1c-d790-475f-abfc-baee8153acd2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd526f95-8082-4e67-88d4-811aa7216ead",
                            Email = "yevhen.pasichnyk@oa.edu.ua",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "YEVHEN.PASICHNYK@OA.EDU.UA",
                            NormalizedUserName = "YEVHEN.PASICHNYK@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEEa13vRZuaP26lVLnFGZYJYab3RM6OMgEVTZK5z3OfN9R8UdWXt+Fm813c531QqzFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "740376cb-afdb-4964-b151-8eed82ed7d30",
                            TwoFactorEnabled = false,
                            UserName = "yevhen.pasichnyk@oa.edu.ua",
                            HasCar = false,
                            Name = "Eugen",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 7, 17, 16, 55, 47, 157, DateTimeKind.Unspecified).AddTicks(5966), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Pasichnyk"
                        },
                        new
                        {
                            Id = "f90ecf75-1f79-40ae-908b-a3625cff0366",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19d58d4d-9286-474f-98c2-695cc41486f4",
                            Email = "pashunskyi@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PASHUNSKYI@GMAIL.COM",
                            NormalizedUserName = "PASHUNSKYI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKZKbca4MbgPlqF+jyeFHE/gDqun5gDPU/C91cCrelMQQoTAM2u8RvtqLuvH2viTlQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4700b6a5-1d47-49fd-9f27-2ec350b3056a",
                            TwoFactorEnabled = false,
                            UserName = "pashunskyi@gmail.com",
                            HasCar = false,
                            Name = "Volodya",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 7, 17, 16, 55, 47, 157, DateTimeKind.Unspecified).AddTicks(5979), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Pashunskyi"
                        },
                        new
                        {
                            Id = "692de99f-b9a9-4a4b-a55f-21ce4271f939",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83bbb2e4-ed5b-4916-8709-120e63190433",
                            Email = "antonina.loboda@oa.edu.ua",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANTONINA.LOBODA@OA.EDU.UA",
                            NormalizedUserName = "ANTONINA.LOBODA@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAENPq9BH42dkCU4YcRzRLAMG5SDjvaKXsJZdSf2UDFKixAWrAgzLz0G4xmCEE9K9KsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9498504d-b137-4fcf-a339-efe45df4f8d9",
                            TwoFactorEnabled = false,
                            UserName = "antonina.loboda@oa.edu.ua",
                            HasCar = false,
                            Name = "Antonina",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 7, 17, 16, 55, 47, 157, DateTimeKind.Unspecified).AddTicks(5989), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Loboda"
                        },
                        new
                        {
                            Id = "1c6ceb41-ad5b-4d4a-b899-15b0b6a879aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f54163d3-82ff-40b4-94e3-56c89d868f65",
                            Email = "sergeyeremenko@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SERGEYEREMENKO@GMAIL.COM",
                            NormalizedUserName = "SERGEYEREMENKO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFrwJzlksSueufut3rQS9TtpMFupsM8IKPTMJmbz932LsXHIksxVmQOYlzrv3TZrUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c150a96-ca5b-4cde-b16a-cad97e985d94",
                            TwoFactorEnabled = false,
                            UserName = "sergeyeremenko@gmail.com",
                            HasCar = false,
                            Name = "Sergey",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 7, 17, 16, 55, 47, 157, DateTimeKind.Unspecified).AddTicks(6002), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Eremenko"
                        });
                });

            modelBuilder.Entity("Core.Entities.CarEntity.Car", b =>
                {
                    b.HasOne("Core.Entities.CarCategoryEntity.CarCategory", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.InviteEntity.Invite", b =>
                {
                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Invites")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Invites")
                        .HasForeignKey("UserId");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.NotificationEntity.Notification", b =>
                {
                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Notifications")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.OfferEntity.Offer", b =>
                {
                    b.HasOne("Core.Entities.RoleEntity.OfferRole", "OfferRole")
                        .WithMany("Offers")
                        .HasForeignKey("CreatorRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.GoodCategoryEntity.GoodCategory", "GoodCategory")
                        .WithMany("Offers")
                        .HasForeignKey("GoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.NotificationEntity.Notification", "Notification")
                        .WithOne("Offer")
                        .HasForeignKey("Core.Entities.OfferEntity.Offer", "NotificationId");

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Offers")
                        .HasForeignKey("OfferCreatorId");

                    b.HasOne("Core.Entities.PointEntity.PointData", "Point")
                        .WithOne("Offer")
                        .HasForeignKey("Core.Entities.OfferEntity.Offer", "OfferPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Offers")
                        .HasForeignKey("RelatedTripId");

                    b.Navigation("GoodCategory");

                    b.Navigation("Notification");

                    b.Navigation("OfferRole");

                    b.Navigation("Point");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.PointEntity.PointData", b =>
                {
                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Points")
                        .HasForeignKey("TripId");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Core.Entities.RatingEntity.Rating", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", "EstimatorUser")
                        .WithMany("EstimatorRatings")
                        .HasForeignKey("EstimatorUserId");

                    b.HasOne("Core.Entities.UserEntity.User", "RatedUser")
                        .WithMany("RatedRatings")
                        .HasForeignKey("RatedUserId");

                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Ratings")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstimatorUser");

                    b.Navigation("RatedUser");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Core.Entities.RefreshTokenEntity.RefreshToken", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.ReportEntity.Report", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", "ReportedUser")
                        .WithMany("ViolationReports")
                        .HasForeignKey("ReportedUserId");

                    b.HasOne("Core.Entities.UserEntity.User", "ReporterUser")
                        .WithMany("ReporterReports")
                        .HasForeignKey("ReporterUserId");

                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Reports")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportedUser");

                    b.Navigation("ReporterUser");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Core.Entities.TripEntity.Trip", b =>
                {
                    b.HasOne("Core.Entities.CarEntity.Car", "Car")
                        .WithMany("Trips")
                        .HasForeignKey("TransportationCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("TripCreatorId");

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.CarCategoryEntity.CarCategory", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Core.Entities.CarEntity.Car", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Core.Entities.GoodCategoryEntity.GoodCategory", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Core.Entities.NotificationEntity.Notification", b =>
                {
                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Core.Entities.PointEntity.PointData", b =>
                {
                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Core.Entities.RoleEntity.OfferRole", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Core.Entities.TripEntity.Trip", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Notifications");

                    b.Navigation("Offers");

                    b.Navigation("Points");

                    b.Navigation("Ratings");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("EstimatorRatings");

                    b.Navigation("Invites");

                    b.Navigation("Notifications");

                    b.Navigation("Offers");

                    b.Navigation("RatedRatings");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ReporterReports");

                    b.Navigation("Trips");

                    b.Navigation("ViolationReports");
                });
#pragma warning restore 612, 618
        }
    }
}
