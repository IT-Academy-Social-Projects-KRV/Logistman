// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220622124230_AddSeed")]
    partial class AddSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.CarCategoryEntity.CarCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CarCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "B"
                        },
                        new
                        {
                            Id = 3,
                            Name = "C"
                        },
                        new
                        {
                            Id = 4,
                            Name = "D"
                        });
                });

            modelBuilder.Entity("Core.Entities.CarEntity.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<float>("LoadCapacity")
                        .HasColumnType("real");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TechnicalPassport")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vin")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 3,
                            Color = "Red",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 3, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 612.95374f,
                            Model = "Ford,F250 Super Duty Super Cab, Pickup",
                            RegistrationNumber = "PQ4GA2QT8XTTWTUHJ690",
                            TechnicalPassport = "RA0A8Q88EW1P57LKUBB3",
                            UserId = "4349581d-5409-472d-8d92-34bee4e4b56d",
                            Vin = "CMQVJ5PSGOJEIEQU8"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            Color = "Black",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 5, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 657.86115f,
                            Model = "Ford,F350 Super Duty Super Cab, Pickup",
                            RegistrationNumber = "BW4OO79M7V5NRYDJC63J",
                            TechnicalPassport = "LFC5RO6UZ3Q9VL0QL7UY",
                            UserId = "1e7179c2-e686-43f1-966a-b7e1155b2de9",
                            Vin = "9TERRFCAVDQXUWJZW"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Color = "White",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 3, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 824.2664f,
                            Model = "Nissan,Titan King Cab, Pickup",
                            RegistrationNumber = "44WR6YMY4B43F6JRZXQI",
                            TechnicalPassport = "P7CJXQ37MAVX0I4OHZLH",
                            UserId = "0e83535b-2bb7-4578-a121-6f1fa2bf12d6",
                            Vin = "Q2LTEP07X29XXWSDU"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Color = "Yellow",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 2, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 496.5435f,
                            Model = "Ford,F350 Super Duty Crew Cab, Pickup",
                            RegistrationNumber = "TG73X2U90B9SDGAX3CD6",
                            TechnicalPassport = "EDSN2L7W446M9ZWLDQHN",
                            UserId = "1e7179c2-e686-43f1-966a-b7e1155b2de9",
                            Vin = "WR04JFHFR2H8XGOK1"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            Color = "Yellow",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 2, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 881.5699f,
                            Model = "Jeep,Wrangler Unlimited, SUV",
                            RegistrationNumber = "W5NIDKOJDVQ1GH1NY1RE",
                            TechnicalPassport = "PD3502GXTO5T7T0LCL6V",
                            UserId = "e2ed9ebe-bc66-4224-af81-57089784cf06",
                            Vin = "D7Q7GYNW2B3JFI1II"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            Color = "Green",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 2, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 525.28217f,
                            Model = "Nissan,TITAN XD Crew Cab, Pickup",
                            RegistrationNumber = "OQWTNHFACUVLTZVESLI9",
                            TechnicalPassport = "XLUPODHJU3VS16PHTETH",
                            UserId = "d8578855-6f9e-4b59-bda9-0c5f8381a194",
                            Vin = "QG7XMI63PPLHS2W65"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Color = "Grey",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 2, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 864.05066f,
                            Model = "Ford,F350 Super Duty Super Cab, Pickup",
                            RegistrationNumber = "8Z3KMAEKES02AVDIQQYD",
                            TechnicalPassport = "RE56JDMLN9JGB6HG4CZ7",
                            UserId = "e2ed9ebe-bc66-4224-af81-57089784cf06",
                            Vin = "AWKFH7IOEJ1IOUTW1"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Color = "Black",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 4, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 753.6022f,
                            Model = "Porsche,Cayenne, SUV",
                            RegistrationNumber = "49KQ4DXEDRQL838M4WF3",
                            TechnicalPassport = "YV0FSINM7BQJZL5N0ODT",
                            UserId = "e2ed9ebe-bc66-4224-af81-57089784cf06",
                            Vin = "0RAWGRKAXC8PY984X"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Color = "Green",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 5, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 990.29803f,
                            Model = "Jeep,Wrangler Unlimited, SUV",
                            RegistrationNumber = "207MMXLLFILIOV85W1W2",
                            TechnicalPassport = "XEEA9MWEWQR2B3XR3AUT",
                            UserId = "0e83535b-2bb7-4578-a121-6f1fa2bf12d6",
                            Vin = "HTM7AE0Z1JU79NMWD"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Color = "Yellow",
                            CreationDate = new DateTimeOffset(new DateTime(2016, 7, 4, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsVerified = true,
                            LoadCapacity = 733.16016f,
                            Model = "Nissan,TITAN XD Crew Cab, Pickup",
                            RegistrationNumber = "PRJ6LXG1L7229XKN1CIE",
                            TechnicalPassport = "WO773U957XUSSYR230PH",
                            UserId = "e7006c22-8b54-4341-a4c5-feeba990f350",
                            Vin = "GCS5ZQ18BMJST0JB3"
                        });
                });

            modelBuilder.Entity("Core.Entities.GoodCategoryEntity.GoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("GoodCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "FOOD"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DRINKS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CLOTHING"
                        },
                        new
                        {
                            Id = 4,
                            Name = "FOOTWEAR"
                        },
                        new
                        {
                            Id = 5,
                            Name = "HYGIENE PRODUCTS"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CAMOUFLAGE"
                        },
                        new
                        {
                            Id = 7,
                            Name = "MEDICINES"
                        });
                });

            modelBuilder.Entity("Core.Entities.InviteEntity.Invite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OfferId")
                        .IsUnique();

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("Core.Entities.OfferEntity.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatorRoleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("GoodCategoryId")
                        .HasColumnType("int");

                    b.Property<float>("GoodsWeight")
                        .HasColumnType("real");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<string>("OfferCreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OfferPointId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedTripId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CreatorRoleId");

                    b.HasIndex("GoodCategoryId");

                    b.HasIndex("OfferCreatorId");

                    b.HasIndex("OfferPointId");

                    b.HasIndex("RelatedTripId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 29, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Ondricka IncTasty Granite Tuna Brook Valley Taka transparent Executive Saint Vincent and the Grenadines Brunei Dollar Tasty Metal Shoes bluetooth support maximized Garden Intelligent Incredible Granite Checking Account Street Games & Outdoors PCI yellow index orchid Concrete deposit copying invoice.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 9, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 5,
                            GoodsWeight = 15.706328f,
                            IsClosed = false,
                            OfferCreatorId = "e7006c22-8b54-4341-a4c5-feeba990f350",
                            OfferPointId = 1,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 27, 13, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Gleichner - BinsCrossing invoice Auto Loan Account Mountains Sleek Concrete Pizza Practical Steel Salad invoice withdrawal infomediaries back-end.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 6, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 4,
                            GoodsWeight = 150.36609f,
                            IsClosed = false,
                            OfferCreatorId = "1e7179c2-e686-43f1-966a-b7e1155b2de9",
                            OfferPointId = 2,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 3, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 26, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Cummings - AdamsPennsylvania Arizona Direct Ouguiya payment Station Wisconsin Cotton Square Valleys back-end override mint green Generic Soft Fish Cambridgeshire Club iterate systems empower Engineer Plains synthesizing Denar encoding Customer Cliffs deposit Director SMS Ergonomic.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 8, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 4,
                            GoodsWeight = 791.0218f,
                            IsClosed = false,
                            OfferCreatorId = "72a2f802-cfe3-47e4-9b73-a9ae3374a364",
                            OfferPointId = 3,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 5, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 30, 13, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Willms and SonsProgram Rustic disintermediate Borders hub solid state portals action-items Brand synthesize cyan Borders Fall Fields Direct web-enabled.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 8, 23, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 6,
                            GoodsWeight = 165.49965f,
                            IsClosed = false,
                            OfferCreatorId = "4349581d-5409-472d-8d92-34bee4e4b56d",
                            OfferPointId = 4,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 6, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 28, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Luettgen GroupErgonomic Visionary Gorgeous Plastic Sausages lime Ergonomic Nebraska Florida Response Savings Account fuchsia hack Self-enabling infrastructures Gorgeous Borders Rustic.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 7, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 5,
                            GoodsWeight = 427.74103f,
                            IsClosed = false,
                            OfferCreatorId = "0e83535b-2bb7-4578-a121-6f1fa2bf12d6",
                            OfferPointId = 5,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 3, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 23, 21, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Kessler, Cruickshank and Binscommunities haptic Factors Crossing Grass-roots Handmade Synergistic Refined Fresh Ball Walk partnerships Intelligent.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 7, 22, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 1,
                            GoodsWeight = 519.6237f,
                            IsClosed = false,
                            OfferCreatorId = "d8578855-6f9e-4b59-bda9-0c5f8381a194",
                            OfferPointId = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 29, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Roob Increciprocal Oregon Avon yellow SMS Accounts withdrawal hacking Brunei Dollar withdrawal Generic Frozen Bacon Implementation bifurcated Ergonomic Rubber Shoes SQL Creek Leone Berkshire Metrics service-desk Intelligent Soft Shirt Customer-focused 6th generation Metal alarm wireless copy driver.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 7, 22, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 3,
                            GoodsWeight = 76.8006f,
                            IsClosed = false,
                            OfferCreatorId = "d8578855-6f9e-4b59-bda9-0c5f8381a194",
                            OfferPointId = 7,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 4, 5, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 23, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Wolff - Murphyleverage strategic payment Cambridgeshire Human connecting enable Wisconsin clicks-and-mortar Implementation invoice Global feed function Montana.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 10, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 4,
                            GoodsWeight = 662.0422f,
                            IsClosed = false,
                            OfferCreatorId = "0e83535b-2bb7-4578-a121-6f1fa2bf12d6",
                            OfferPointId = 8,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 25, 7, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Blanda GroupWooden Customer Licensed solid state supply-chains Toys & Health solution-oriented Walk partnerships functionalities Organic Sleek auxiliary Sudanese Pound Accountability schemas input Dale Home Loan Account Prairie Concrete zero tolerance tangible high-level blue payment Pennsylvania National.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 9, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 5,
                            GoodsWeight = 466.64197f,
                            IsClosed = false,
                            OfferCreatorId = "d8578855-6f9e-4b59-bda9-0c5f8381a194",
                            OfferPointId = 9,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 3, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 21, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Schowalter LLCFace to face generate Borders 6th generation array Triple-buffered program Tokelau magenta Ameliorated open-source Armenian Dram Stream Lights Bermudian Dollar (customarily known as Bermuda Dollar) Applications lime Triple-buffered Hryvnia azure Cambridgeshire.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 5, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 7,
                            GoodsWeight = 47.2716f,
                            IsClosed = false,
                            OfferCreatorId = "d8578855-6f9e-4b59-bda9-0c5f8381a194",
                            OfferPointId = 10,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 7, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 11,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 27, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Hermann, McGlynn and PadbergPlanner global deposit copying purple synthesize Kids grey Bedfordshire Washington pink payment online analyzing Rubber XML Manager frame Nebraska Qatari Rial Spain plum clicks-and-mortar Designer e-markets.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 9, 21, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 2,
                            GoodsWeight = 872.22284f,
                            IsClosed = false,
                            OfferCreatorId = "e2ed9ebe-bc66-4224-af81-57089784cf06",
                            OfferPointId = 11,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 6, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 12,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 30, 6, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Ratke, Luettgen and GusikowskiVermont red copy transmitting Communications ADP innovative Rustic Soft Hat alarm Oregon Isle.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 9, 21, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 5,
                            GoodsWeight = 184.61325f,
                            IsClosed = false,
                            OfferCreatorId = "1e7179c2-e686-43f1-966a-b7e1155b2de9",
                            OfferPointId = 12,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 3, 5, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 13,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 29, 21, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Rosenbaum LLCTasty Concrete Bike Spurs Dynamic explicit Crescent Home Loan Account Intelligent quantifying Tennessee solution-oriented copying bottom-line Kids compress Mills value-added virtual Avon transmit Research mobile Senior plum open-source.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 7, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 2,
                            GoodsWeight = 549.7291f,
                            IsClosed = false,
                            OfferCreatorId = "e7006c22-8b54-4341-a4c5-feeba990f350",
                            OfferPointId = 13,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 14,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 26, 21, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Runolfsdottir - NolanAvon THX local system-worthy seamless back up cross-media Tools & Music wireless haptic withdrawal.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 8, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 4,
                            GoodsWeight = 712.35095f,
                            IsClosed = false,
                            OfferCreatorId = "1e7179c2-e686-43f1-966a-b7e1155b2de9",
                            OfferPointId = 14,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 15,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 22, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Stiedemann LLCGorgeous bluetooth synergy Chief Shores Generic Cotton Hollow Factors zero administration Berkshire National THX revolutionize Consultant XML Fantastic Plastic Computer collaboration e-business Row Usability bypassing Bhutan.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 6, 19, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 5,
                            GoodsWeight = 937.73517f,
                            IsClosed = false,
                            OfferCreatorId = "4349581d-5409-472d-8d92-34bee4e4b56d",
                            OfferPointId = 15,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 5, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 16,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 27, 7, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Kling - RomagueraCalifornia Web HDD Pennsylvania Sleek Handmade Rubber Shirt scale West Virginia Seychelles Concrete USB feed Regional magenta bus Route dot-com copy Gorgeous Saint Vincent and the Grenadines Electronics & Home deposit grid-enabled Practical Frozen Sausages.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 6, 22, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 2,
                            GoodsWeight = 553.6069f,
                            IsClosed = false,
                            OfferCreatorId = "0e83535b-2bb7-4578-a121-6f1fa2bf12d6",
                            OfferPointId = 16,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 6, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 17,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 29, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Hirthe - Russelsecured line Unbranded Frozen Bike AGP even-keeled heuristic Kiribati Music, Shoes & Baby superstructure Bedfordshire Incredible Rubber Shirt EXE mission-critical Credit Card Account.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 5, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 4,
                            GoodsWeight = 37.15862f,
                            IsClosed = false,
                            OfferCreatorId = "72a2f802-cfe3-47e4-9b73-a9ae3374a364",
                            OfferPointId = 17,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 5, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 18,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 25, 20, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "Parisian, DuBuque and BahringerWon silver Shoes, Health & Home quantifying Tools & Sports Automotive, Games & Kids connect Bedfordshire Shoals secondary override mobile Sports & Industrial payment framework Dynamic hack yellow primary Designer Producer Fantastic Frozen Bike Program empower Washington.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 9, 23, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 1,
                            GoodsWeight = 685.0216f,
                            IsClosed = false,
                            OfferCreatorId = "72a2f802-cfe3-47e4-9b73-a9ae3374a364",
                            OfferPointId = 18,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 5, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 19,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 21, 6, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Collier - Mitchellhard drive array Analyst Marketing overriding Automated Investor Plains Electronics & Books mobile Palestinian Territory Sleek Handmade Corner gold Gorgeous Metal Table Mexico Garden, Grocery & Movies Stravenue Tools, Health & Outdoors SMS Intranet Producer Home Hong Kong salmon.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 10, 19, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 7,
                            GoodsWeight = 741.5565f,
                            IsClosed = false,
                            OfferCreatorId = "1e7179c2-e686-43f1-966a-b7e1155b2de9",
                            OfferPointId = 19,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 20,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 6, 26, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "Monahan - Hanefunctionalities Refined Handmade card deposit Cambridgeshire Harbor Markets Bedfordshire Latvia Fresh dynamic infrastructures Practical Plastic Bacon markets Auto Loan Account Street Directives indigo invoice Global Montana extranet Consultant.",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 10, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 4,
                            GoodsWeight = 617.2641f,
                            IsClosed = false,
                            OfferCreatorId = "4349581d-5409-472d-8d92-34bee4e4b56d",
                            OfferPointId = 20,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 5, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 21,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 7, 13, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "My 1 offer",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 17, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 4,
                            GoodsWeight = 120f,
                            IsClosed = false,
                            OfferCreatorId = "e7006c22-8b54-4341-a4c5-feeba990f350",
                            OfferPointId = 21,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 13, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 22,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 7, 18, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "My 2 offer",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 19, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 7,
                            GoodsWeight = 120f,
                            IsClosed = false,
                            OfferCreatorId = "0e83535b-2bb7-4578-a121-6f1fa2bf12d6",
                            OfferPointId = 22,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 18, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 23,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 7, 20, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "My 3 offer",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 21, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 4,
                            GoodsWeight = 120f,
                            IsClosed = false,
                            OfferCreatorId = "d8578855-6f9e-4b59-bda9-0c5f8381a194",
                            OfferPointId = 23,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 20, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 24,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 7, 22, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "My 4 offer",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 23, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 2,
                            GoodsWeight = 120f,
                            IsClosed = false,
                            OfferCreatorId = "4349581d-5409-472d-8d92-34bee4e4b56d",
                            OfferPointId = 24,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 22, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 25,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 7, 24, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "My 5 offer",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 25, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 1,
                            GoodsWeight = 120f,
                            IsClosed = false,
                            OfferCreatorId = "e7006c22-8b54-4341-a4c5-feeba990f350",
                            OfferPointId = 25,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 24, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 26,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 7, 1, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 2,
                            Description = "My 6 offer",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 7, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 7,
                            GoodsWeight = 120f,
                            IsClosed = false,
                            OfferCreatorId = "0e83535b-2bb7-4578-a121-6f1fa2bf12d6",
                            OfferPointId = 26,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 27,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 7, 28, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "My 7 offer",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 29, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 6,
                            GoodsWeight = 120f,
                            IsClosed = false,
                            OfferCreatorId = "d8578855-6f9e-4b59-bda9-0c5f8381a194",
                            OfferPointId = 27,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 28, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 28,
                            CreationDate = new DateTimeOffset(new DateTime(2022, 8, 1, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatorRoleId = 1,
                            Description = "My 8 offer",
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 8, 3, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            GoodCategoryId = 3,
                            GoodsWeight = 120f,
                            IsClosed = false,
                            OfferCreatorId = "4349581d-5409-472d-8d92-34bee4e4b56d",
                            OfferPointId = 28,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Core.Entities.PointEntity.PointData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStopover")
                        .HasColumnType("bit");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Settlement")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("Points");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "вулиця Східна, 32",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (26.5283633 50.3288577)"),
                            Order = 0,
                            Postcode = "35800",
                            Region = "Рівненська область",
                            Settlement = "Острог"
                        },
                        new
                        {
                            Id = 2,
                            Address = "вулиця Соборна, 5",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (26.2614291 50.6175848)"),
                            Order = 0,
                            Postcode = "33000",
                            Region = "Рівненська область",
                            Settlement = "Рівне"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Вишнівецька вулиця, 30",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (25.3839251 50.724626)"),
                            Order = 0,
                            Postcode = "43000",
                            Region = "Волинська область",
                            Settlement = "Луцьк"
                        },
                        new
                        {
                            Id = 4,
                            Address = "вулиця Юрія Савченко, 1",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (35.0256349 48.4674516)"),
                            Order = 0,
                            Postcode = "49000",
                            Region = "Дніпропетровська область",
                            Settlement = "Дніпро"
                        },
                        new
                        {
                            Id = 5,
                            Address = "вулиця Пушкіна, 1",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (37.3386598 47.1917281)"),
                            Order = 0,
                            Postcode = "87000",
                            Region = "Донецька область",
                            Settlement = "Нікольське"
                        },
                        new
                        {
                            Id = 6,
                            Address = "вулиця Садова, 1",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (32.0033648 46.9690278)"),
                            Order = 0,
                            Postcode = "54000",
                            Region = "Миколаївська область",
                            Settlement = "Миколаїв"
                        },
                        new
                        {
                            Id = 7,
                            Address = "вулиця Павлова, 1",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (32.2345305 48.5175858)"),
                            Order = 0,
                            Postcode = "25000",
                            Region = "Кіровоградська область",
                            Settlement = "Кропивницький"
                        },
                        new
                        {
                            Id = 8,
                            Address = "вулиця Чкалова, 20",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (32.2277797 48.5183484)"),
                            Order = 0,
                            Postcode = "25000",
                            Region = "Кіровоградська область",
                            Settlement = "Кропивницький"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Посадочна вулиця, 5",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (32.2269653 48.5181244)"),
                            Order = 0,
                            Postcode = "25000",
                            Region = "Кіровоградська область",
                            Settlement = "Кропивницький"
                        },
                        new
                        {
                            Id = 10,
                            Address = "вулиця Юрія Савченка, 3",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (35.0247707 48.4658504)"),
                            Order = 0,
                            Postcode = "49000",
                            Region = "Дніпропетровська область",
                            Settlement = "Дніпро"
                        },
                        new
                        {
                            Id = 11,
                            Address = "просп. Вячеслава Черновола, 11",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (24.0253381 49.8468734)"),
                            Order = 0,
                            Postcode = "79000",
                            Region = "Львівська область",
                            Settlement = "Львів"
                        },
                        new
                        {
                            Id = 12,
                            Address = "вулиця Шишкіна, 1",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (22.3178905 48.6102995)"),
                            Order = 0,
                            Postcode = "88000",
                            Region = "Закарпатська область",
                            Settlement = "Ужгород"
                        },
                        new
                        {
                            Id = 13,
                            Address = "вулиця Козацька, 1",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (26.9919167 49.4178562)"),
                            Order = 0,
                            Postcode = "29000",
                            Region = "Хмельницька  область",
                            Settlement = "Хмельницький"
                        },
                        new
                        {
                            Id = 14,
                            Address = "вулиця Братиславська, 1",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (33.3286723 47.8847308)"),
                            Order = 0,
                            Postcode = "50000",
                            Region = "Дніпропетровська область",
                            Settlement = "Кривий Ріг"
                        },
                        new
                        {
                            Id = 15,
                            Address = "вулиця Слов'янська, 1",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (32.0147107 47.031949)"),
                            Order = 0,
                            Postcode = "54000",
                            Region = "Миколаївська область",
                            Settlement = "Миколаїв"
                        },
                        new
                        {
                            Id = 16,
                            Address = "вулиця Привільна, 1",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (32.0222338 46.9858772)"),
                            Order = 0,
                            Postcode = "54000",
                            Region = "Миколаївська область",
                            Settlement = "Миколаїв"
                        },
                        new
                        {
                            Id = 17,
                            Address = "вулиця Привільна, 10",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (32.0210963 46.9880672)"),
                            Order = 0,
                            Postcode = "54000",
                            Region = "Миколаївська область",
                            Settlement = "Миколаїв"
                        },
                        new
                        {
                            Id = 18,
                            Address = "вулиця В'ячеслава Чорновола, 1",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (25.36196 50.755603)"),
                            Order = 0,
                            Postcode = "43000",
                            Region = "Волинська область",
                            Settlement = "Луцьк"
                        },
                        new
                        {
                            Id = 19,
                            Address = "вулиця Острозька, 1",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (26.8544323 50.3006939)"),
                            Order = 0,
                            Postcode = "30000",
                            Region = "Хмельницька область",
                            Settlement = "Славута"
                        },
                        new
                        {
                            Id = 20,
                            Address = "вулиця Бориса Тена, 2",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (28.6727154 50.2541948)"),
                            Order = 0,
                            Postcode = "10001",
                            Region = "Житомирська область",
                            Settlement = "Житомир"
                        },
                        new
                        {
                            Id = 21,
                            Address = "вул Соборна 44б",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.4570465 48.3880023)"),
                            Order = 0,
                            Postcode = "26500",
                            Region = "Кіровоградська область",
                            Settlement = "Голованівськ"
                        },
                        new
                        {
                            Id = 22,
                            Address = "Центральна 119",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.1641172 48.1413224)"),
                            Order = 0,
                            Postcode = "66221",
                            Region = "Одеська область",
                            Settlement = "Вільшанка"
                        },
                        new
                        {
                            Id = 23,
                            Address = "Криве Озеро",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.3443027 47.9484405)"),
                            Order = 0,
                            Postcode = "55100",
                            Region = "Миколаївська область",
                            Settlement = "Криве Озеро"
                        },
                        new
                        {
                            Id = 24,
                            Address = "вулиця Шевченка, 10",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.9116167 47.1991193)"),
                            Order = 0,
                            Postcode = "67301",
                            Region = "Одеська область",
                            Settlement = "Березівка"
                        },
                        new
                        {
                            Id = 25,
                            Address = "Трасса Е 95",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.317371 47.0234622)"),
                            Order = 0,
                            Postcode = "67211",
                            Region = "Одеська область",
                            Settlement = "Знам'янка"
                        },
                        new
                        {
                            Id = 26,
                            Address = "48Q2+JJ Дубинове",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.3017199 48.1390924)"),
                            Order = 0,
                            Postcode = "66220",
                            Region = "Одеська область",
                            Settlement = "Дубинове"
                        },
                        new
                        {
                            Id = 27,
                            Address = "вулиця Медична, 19",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (33.3832712 47.8876902)"),
                            Order = 0,
                            Postcode = "50005",
                            Region = "Дніпропетровська область",
                            Settlement = "Кривий Ріг"
                        },
                        new
                        {
                            Id = 28,
                            Address = "вул. Станціонна, 1",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (32.4974225 47.5464278)"),
                            Order = 0,
                            Postcode = "55642",
                            Region = "Миколаївська область",
                            Settlement = "Новополтавка"
                        },
                        new
                        {
                            Id = 29,
                            Address = "вулиця Волкова, 2",
                            Country = "Україна",
                            IsStopover = false,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.2557039 48.7424709)"),
                            Order = 1,
                            Postcode = "20300",
                            Region = "Черкаська область",
                            Settlement = "Умань",
                            TripId = 1
                        },
                        new
                        {
                            Id = 30,
                            Address = "48Q2+JJ",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.3017199 48.1390924)"),
                            Order = 2,
                            Postcode = "20300",
                            Region = "Одеська область",
                            Settlement = "Дубинове",
                            TripId = 1
                        },
                        new
                        {
                            Id = 31,
                            Address = "28F8+9X",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.3174055 47.0235592)"),
                            Order = 3,
                            Postcode = "20300",
                            Region = "Одеська область",
                            Settlement = "Знам'янка",
                            TripId = 1
                        },
                        new
                        {
                            Id = 32,
                            Address = "вулиця Мічуріна, 41",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.6598914 46.4932837)"),
                            Order = 4,
                            Postcode = "65000",
                            Region = "Одеська область",
                            Settlement = "Одеса",
                            TripId = 1
                        },
                        new
                        {
                            Id = 33,
                            Address = "проспект Перемоги, ст. метро Житомирська",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (30.36545 50.45624)"),
                            Order = 1,
                            Postcode = "02000",
                            Region = "Київcька область",
                            Settlement = "Київ",
                            TripId = 2
                        },
                        new
                        {
                            Id = 34,
                            Address = "вулиця Київська, 77",
                            Country = "Україна",
                            IsStopover = false,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (28.68603 50.26679)"),
                            Order = 2,
                            Postcode = "10001",
                            Region = "Житомирська область",
                            Settlement = "Житомир",
                            TripId = 2
                        },
                        new
                        {
                            Id = 35,
                            Address = "вулиця Житомирська, 41-А",
                            Country = "Україна",
                            IsStopover = false,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (27.62649 50.58838)"),
                            Order = 3,
                            Postcode = "11702",
                            Region = "Житомирська область",
                            Settlement = "Новоград-Волинський",
                            TripId = 2
                        },
                        new
                        {
                            Id = 36,
                            Address = "майдан Незалежності, 2, Рівне, Рівненська область, 33000",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (26.2517 50.62034)"),
                            Order = 4,
                            Postcode = "33000",
                            Region = "Рівненська область",
                            Settlement = "Рівне",
                            TripId = 2
                        },
                        new
                        {
                            Id = 37,
                            Address = "вулиця Сухомлинського, 1",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (25.35595 50.7553)"),
                            Order = 1,
                            Postcode = "43000",
                            Region = "Волинська область",
                            Settlement = "Луцьк",
                            TripId = 3
                        },
                        new
                        {
                            Id = 38,
                            Address = "вулиця Луцька, 27",
                            Country = "Україна",
                            IsStopover = false,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (24.76512 50.50216)"),
                            Order = 2,
                            Postcode = "45700",
                            Region = "Волинська область",
                            Settlement = "Горохів",
                            TripId = 3
                        },
                        new
                        {
                            Id = 39,
                            Address = "вулиця Витківська",
                            Country = "Україна",
                            IsStopover = false,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (24.63097 50.28358)"),
                            Order = 3,
                            Postcode = "80200",
                            Region = "Львівська область",
                            Settlement = "Радехів",
                            TripId = 3
                        },
                        new
                        {
                            Id = 40,
                            Address = "вулиця Стрийська, 30 ТРЦ King Cross Leopolis",
                            Country = "Україна",
                            IsStopover = false,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (24.00991 49.77351)"),
                            Order = 4,
                            Postcode = "81130",
                            Region = "Львівська область",
                            Settlement = "Сокільники",
                            TripId = 3
                        },
                        new
                        {
                            Id = 41,
                            Address = "вулиця Дубравського, 6",
                            Country = "Україна",
                            IsStopover = false,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (23.85867 49.26081)"),
                            Order = 5,
                            Postcode = "82400",
                            Region = "Львівська область",
                            Settlement = "Стрий",
                            TripId = 3
                        },
                        new
                        {
                            Id = 42,
                            Address = "вулиця Верещагіна, 16",
                            Country = "Україна",
                            IsStopover = true,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (22.3112 48.60822)"),
                            Order = 6,
                            Postcode = "88000",
                            Region = "Закарпатська область",
                            Settlement = "Ужгород",
                            TripId = 3
                        });
                });

            modelBuilder.Entity("Core.Entities.RatingEntity.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstimatorUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("RatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("RatingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstimatorUserId");

                    b.HasIndex("RatedUserId");

                    b.HasIndex("TripId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Core.Entities.RefreshTokenEntity.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Core.Entities.ReportEntity.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReporterUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ReportingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReportedUserId");

                    b.HasIndex("ReporterUserId");

                    b.HasIndex("TripId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Core.Entities.RoleEntity.OfferRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OfferRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SENDER"
                        },
                        new
                        {
                            Id = 2,
                            Name = "RECIPIENT"
                        });
                });

            modelBuilder.Entity("Core.Entities.TripEntity.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnded")
                        .HasColumnType("bit");

                    b.Property<float>("LoadCapacity")
                        .HasColumnType("real");

                    b.Property<int>("MaxRouteDeviationKm")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransportationCarId")
                        .HasColumnType("int");

                    b.Property<string>("TripCreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TransportationCarId");

                    b.HasIndex("TripCreatorId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "It`s my first offer!",
                            Distance = 150f,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 8, 22, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = false,
                            IsEnded = false,
                            LoadCapacity = 2000f,
                            MaxRouteDeviationKm = 20,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 10, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            TransportationCarId = 1,
                            TripCreatorId = "4349581d-5409-472d-8d92-34bee4e4b56d"
                        },
                        new
                        {
                            Id = 2,
                            Description = "I'm going from Kyiv to Rivne. So welcome!",
                            Distance = 400f,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 15, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = false,
                            IsEnded = false,
                            LoadCapacity = 2000f,
                            MaxRouteDeviationKm = 15,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 1, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            TransportationCarId = 3,
                            TripCreatorId = "0e83535b-2bb7-4578-a121-6f1fa2bf12d6"
                        },
                        new
                        {
                            Id = 3,
                            Description = "I'm going from Lutsk to Uzhhorod. So welcome!",
                            Distance = 400f,
                            ExpirationDate = new DateTimeOffset(new DateTime(2022, 7, 18, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = false,
                            IsEnded = false,
                            LoadCapacity = 2000f,
                            MaxRouteDeviationKm = 15,
                            StartDate = new DateTimeOffset(new DateTime(2022, 7, 2, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            TransportationCarId = 10,
                            TripCreatorId = "e7006c22-8b54-4341-a4c5-feeba990f350"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ae5f42c7-8cec-49fa-9470-fd5ccbaee433",
                            ConcurrencyStamp = "ae5f42c7-8cec-49fa-9470-fd5ccbaee433",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "80b5a8c5-b660-4933-afc9-137e312ccfc2",
                            ConcurrencyStamp = "80b5a8c5-b660-4933-afc9-137e312ccfc2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "45e19151-8c22-44f8-bb94-1371b0187589",
                            ConcurrencyStamp = "45e19151-8c22-44f8-bb94-1371b0187589",
                            Name = "Logist",
                            NormalizedName = "LOGIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1e7179c2-e686-43f1-966a-b7e1155b2de9",
                            RoleId = "ae5f42c7-8cec-49fa-9470-fd5ccbaee433"
                        },
                        new
                        {
                            UserId = "d8578855-6f9e-4b59-bda9-0c5f8381a194",
                            RoleId = "ae5f42c7-8cec-49fa-9470-fd5ccbaee433"
                        },
                        new
                        {
                            UserId = "72a2f802-cfe3-47e4-9b73-a9ae3374a364",
                            RoleId = "ae5f42c7-8cec-49fa-9470-fd5ccbaee433"
                        },
                        new
                        {
                            UserId = "0e83535b-2bb7-4578-a121-6f1fa2bf12d6",
                            RoleId = "ae5f42c7-8cec-49fa-9470-fd5ccbaee433"
                        },
                        new
                        {
                            UserId = "4349581d-5409-472d-8d92-34bee4e4b56d",
                            RoleId = "ae5f42c7-8cec-49fa-9470-fd5ccbaee433"
                        },
                        new
                        {
                            UserId = "ea024ffa-89ed-415d-a111-60718153d19a",
                            RoleId = "45e19151-8c22-44f8-bb94-1371b0187589"
                        },
                        new
                        {
                            UserId = "e7006c22-8b54-4341-a4c5-feeba990f350",
                            RoleId = "ae5f42c7-8cec-49fa-9470-fd5ccbaee433"
                        },
                        new
                        {
                            UserId = "e2ed9ebe-bc66-4224-af81-57089784cf06",
                            RoleId = "ae5f42c7-8cec-49fa-9470-fd5ccbaee433"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("ConfirmationEmailToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ConfirmationEmailTokenExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("HasCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "1e7179c2-e686-43f1-966a-b7e1155b2de9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d0bb987-87b3-45fc-9b31-cb561ba99ca7",
                            Email = "chorrny228@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CHORRNY228@GMAIL.COM",
                            NormalizedUserName = "CHORRNY228@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPP6/UyUSYg180WHaf9zlXv8kFLsnB44gz7MjHaLgb11NVR79LE/CbD7B7iXxc43jQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54c83b49-2a61-469b-b14b-575c3ac95bb4",
                            TwoFactorEnabled = false,
                            UserName = "chorrny228@gmail.com",
                            HasCar = false,
                            Name = "Vadym",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 6, 22, 12, 42, 28, 116, DateTimeKind.Unspecified).AddTicks(8597), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Chorrny"
                        },
                        new
                        {
                            Id = "d8578855-6f9e-4b59-bda9-0c5f8381a194",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10cd1a67-cfe6-489f-8818-2b2b119ecbf5",
                            Email = "oppaiarchmaster@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPPAIARCHMASTER@GMAIL.COM",
                            NormalizedUserName = "OPPAIARCHMASTER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL5ajncMKSUakUAIKxUvBY24D+QMEshUZhbbPqHRnTUq9N4iOMnnyu9C61EWdzguIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54c038e3-907b-4e1e-96a8-56604cbebda1",
                            TwoFactorEnabled = false,
                            UserName = "oppaiarchmaster@gmail.com",
                            HasCar = false,
                            Name = "Vlad",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 6, 22, 12, 42, 28, 117, DateTimeKind.Unspecified).AddTicks(1794), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Sievostyanov"
                        },
                        new
                        {
                            Id = "ea024ffa-89ed-415d-a111-60718153d19a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77e76365-9299-4bc2-b30a-c572f22b174b",
                            Email = "andrewchepeliuk@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDREWCHEPELIUK@GMAIL.COM",
                            NormalizedUserName = "ANDREWCHEPELIUK@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIF7qiB0ecJPEWqtjROPhUoUV9hltIEOjlNHTzsZ879ZA4k8wt9ui474mRzCwX8iIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c677f7d8-32e9-4a77-98f2-cef6e51230a2",
                            TwoFactorEnabled = false,
                            UserName = "andrewchepeliuk@gmail.com",
                            HasCar = false,
                            Name = "Andrii",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 6, 22, 12, 42, 28, 117, DateTimeKind.Unspecified).AddTicks(2041), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Chepeliuk"
                        },
                        new
                        {
                            Id = "0e83535b-2bb7-4578-a121-6f1fa2bf12d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "718f2393-16cd-4163-a53f-d7548362356c",
                            Email = "mapourse@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAPOURSE@GMAIL.COM",
                            NormalizedUserName = "MAPOURSE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJM6IjWJi+LPY0UJX+R5m0saVU7SJkP5oU3rk38MDowyLofoul3JBL4pKspovjJelQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f4096aa-bf9d-4c90-9f2d-dac9eff052a0",
                            TwoFactorEnabled = false,
                            UserName = "mapourse@gmail.com",
                            HasCar = false,
                            Name = "Maryna",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 6, 22, 12, 42, 28, 117, DateTimeKind.Unspecified).AddTicks(2100), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Kernychna"
                        },
                        new
                        {
                            Id = "e7006c22-8b54-4341-a4c5-feeba990f350",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b66da60-84d5-4de6-8b95-71401b2f9c24",
                            Email = "yevhen.pasichnyk@oa.edu.ua",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "YEVHEN.PASICHNYK@OA.EDU.UA",
                            NormalizedUserName = "YEVHEN.PASICHNYK@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEDhww7zzVRhkcjnamZ3z86pb5V0YDNqxlnivF3e5NSVtm3Rtp0b8C4TucAh3ftuhEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6297b771-6614-42a2-8739-37e2bfde8cd7",
                            TwoFactorEnabled = false,
                            UserName = "yevhen.pasichnyk@oa.edu.ua",
                            HasCar = false,
                            Name = "Eugen",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 6, 22, 12, 42, 28, 117, DateTimeKind.Unspecified).AddTicks(2120), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Pasichnyk"
                        },
                        new
                        {
                            Id = "72a2f802-cfe3-47e4-9b73-a9ae3374a364",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb2b9210-212b-48de-b291-c5dc7efb42c2",
                            Email = "pashunskyi@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PASHUNSKYI@GMAIL.COM",
                            NormalizedUserName = "PASHUNSKYI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK0+ttSQFvUjxShg4uEgiq3n+0cb4mI5OY/zhidEQ5zEM+FYyiIj5qxDoE6JmyV5Cw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff04046a-1e6e-4242-8eb3-6da9d86eec66",
                            TwoFactorEnabled = false,
                            UserName = "pashunskyi@gmail.com",
                            HasCar = false,
                            Name = "Volodya",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 6, 22, 12, 42, 28, 117, DateTimeKind.Unspecified).AddTicks(2138), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Pashunskyi"
                        },
                        new
                        {
                            Id = "4349581d-5409-472d-8d92-34bee4e4b56d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1de8c678-5c9d-4fe7-beef-d74ce53dd159",
                            Email = "antonina.loboda@oa.edu.ua",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANTONINA.LOBODA@OA.EDU.UA",
                            NormalizedUserName = "ANTONINA.LOBODA@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEBt61/4Sn7lm4KTNanRQwVh5G58rj3FCrdiaVTHw+TsFRc+TgO1P5jPmxCAMML36Pw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d814a4aa-a7a1-445e-baa7-491fdfd6bcc7",
                            TwoFactorEnabled = false,
                            UserName = "antonina.loboda@oa.edu.ua",
                            HasCar = false,
                            Name = "Antonina",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 6, 22, 12, 42, 28, 117, DateTimeKind.Unspecified).AddTicks(2163), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Loboda"
                        },
                        new
                        {
                            Id = "e2ed9ebe-bc66-4224-af81-57089784cf06",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e554210-894e-4a41-844f-5c14576a290a",
                            Email = "sergeyeremenko@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SERGEYEREMENKO@GMAIL.COM",
                            NormalizedUserName = "SERGEYEREMENKO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENOqc0VVWVtXqPIUabz1z2p2Vxvss/VL3jmvjtDUmqcFlm0oU18dZ2nGnr/FzTSBzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d647c7e9-4b1c-4121-a041-91fe00627557",
                            TwoFactorEnabled = false,
                            UserName = "sergeyeremenko@gmail.com",
                            HasCar = false,
                            Name = "Sergey",
                            RegistrationDate = new DateTimeOffset(new DateTime(2022, 6, 22, 12, 42, 28, 117, DateTimeKind.Unspecified).AddTicks(2181), new TimeSpan(0, 0, 0, 0, 0)),
                            Surname = "Eremenko"
                        });
                });

            modelBuilder.Entity("Core.Entities.CarEntity.Car", b =>
                {
                    b.HasOne("Core.Entities.CarCategoryEntity.CarCategory", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.InviteEntity.Invite", b =>
                {
                    b.HasOne("Core.Entities.OfferEntity.Offer", "Offer")
                        .WithOne("Invite")
                        .HasForeignKey("Core.Entities.InviteEntity.Invite", "OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Invites")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Invites")
                        .HasForeignKey("UserId");

                    b.Navigation("Offer");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.OfferEntity.Offer", b =>
                {
                    b.HasOne("Core.Entities.RoleEntity.OfferRole", "OfferRole")
                        .WithMany("Offers")
                        .HasForeignKey("CreatorRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.GoodCategoryEntity.GoodCategory", "GoodCategory")
                        .WithMany("Offers")
                        .HasForeignKey("GoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Offers")
                        .HasForeignKey("OfferCreatorId");

                    b.HasOne("Core.Entities.PointEntity.PointData", "Point")
                        .WithMany("Offers")
                        .HasForeignKey("OfferPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Offers")
                        .HasForeignKey("RelatedTripId");

                    b.Navigation("GoodCategory");

                    b.Navigation("OfferRole");

                    b.Navigation("Point");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.PointEntity.PointData", b =>
                {
                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Points")
                        .HasForeignKey("TripId");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Core.Entities.RatingEntity.Rating", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", "EstimatorUser")
                        .WithMany("EstimatorRatings")
                        .HasForeignKey("EstimatorUserId");

                    b.HasOne("Core.Entities.UserEntity.User", "RatedUser")
                        .WithMany("RatedRatings")
                        .HasForeignKey("RatedUserId");

                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Ratings")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstimatorUser");

                    b.Navigation("RatedUser");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Core.Entities.RefreshTokenEntity.RefreshToken", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.ReportEntity.Report", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", "ReportedUser")
                        .WithMany("ViolationReports")
                        .HasForeignKey("ReportedUserId");

                    b.HasOne("Core.Entities.UserEntity.User", "ReporterUser")
                        .WithMany("ReporterReports")
                        .HasForeignKey("ReporterUserId");

                    b.HasOne("Core.Entities.TripEntity.Trip", "Trip")
                        .WithMany("Reports")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportedUser");

                    b.Navigation("ReporterUser");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Core.Entities.TripEntity.Trip", b =>
                {
                    b.HasOne("Core.Entities.CarEntity.Car", "Car")
                        .WithMany("Trips")
                        .HasForeignKey("TransportationCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("TripCreatorId");

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.CarCategoryEntity.CarCategory", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Core.Entities.CarEntity.Car", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Core.Entities.GoodCategoryEntity.GoodCategory", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Core.Entities.OfferEntity.Offer", b =>
                {
                    b.Navigation("Invite");
                });

            modelBuilder.Entity("Core.Entities.PointEntity.PointData", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Core.Entities.RoleEntity.OfferRole", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Core.Entities.TripEntity.Trip", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Offers");

                    b.Navigation("Points");

                    b.Navigation("Ratings");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("EstimatorRatings");

                    b.Navigation("Invites");

                    b.Navigation("Offers");

                    b.Navigation("RatedRatings");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ReporterReports");

                    b.Navigation("Trips");

                    b.Navigation("ViolationReports");
                });
#pragma warning restore 612, 618
        }
    }
}
